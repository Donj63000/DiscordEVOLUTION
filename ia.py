#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
import logging
import asyncio

import discord
from discord.ext import commands
import google.generativeai as genai
from dotenv import load_dotenv

def chunkify(text: str, max_size: int = 2000):
    """
    D√©coupe un texte en tranches de taille maximale 'max_size',
    afin d‚Äô√©viter les d√©passements de limite de caract√®res de Discord.
    """
    for i in range(0, len(text), max_size):
        yield text[i : i + max_size]

class IACog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        """
        Initialise le Cog de l‚ÄôIA, en configurant notamment :
        - la limite d‚Äôhistorique
        - la taille maximale des prompts
        - la dur√©e de blocage en cas de quota d√©pass√©
        - les canaux sp√©cialis√©s : annonces, organisation, etc.
        - la configuration du logging
        - la configuration du mod√®le Gemini (Google Generative AI)
        - la "m√©moire" du bot (r√®glement + commandes, etc.)
        """
        self.bot = bot
        self.history_limit = 20
        self.max_prompt_size = 5000
        self.quota_block_duration = 3600
        self.quota_exceeded_until = 0
        self.debug_mode = True
        self.annonce_channel_name = "annonces"
        self.event_channel_name = "organisation"
        self.pl_channel_name = "xplock-rondesasa-ronde"

        # Configuration du logging
        self.configure_logging()

        # Configuration du mod√®le Gemini
        self.configure_gemini()

        # Contenu de la "m√©moire" IA (r√®glement + infos)
        self.knowledge_text = self.get_knowledge_text()

    def configure_logging(self):
        """
        Configure le module de logging en fonction du mode (debug ou info).
        """
        logging.basicConfig(
            level=logging.DEBUG if self.debug_mode else logging.INFO,
            format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        )
        self.logger = logging.getLogger("IACog")

    def configure_gemini(self):
        """
        Charge la cl√© d‚ÄôAPI depuis la variable d‚Äôenvironnement GEMINI_API_KEY
        et configure les mod√®les gemini-1.5-pro et gemini-1.5-flash.
        """
        load_dotenv()
        self.api_key = os.getenv("GEMINI_API_KEY")
        if not self.api_key:
            raise ValueError("La variable d'environnement GEMINI_API_KEY est manquante. V√©rifiez votre .env.")
        self.logger.info(f"[IA] Cl√© API charg√©e (longueur={len(self.api_key)}).")
        genai.configure(api_key=self.api_key)
        self.model_pro = genai.GenerativeModel("gemini-1.5-pro")
        self.model_flash = genai.GenerativeModel("gemini-1.5-flash")

    def get_knowledge_text(self) -> str:
        """
        Retourne le texte d√©crivant la m√©moire/les connaissances permanentes du bot
        (r√®glement complet + commandes du bot).
        """
        return (
            "R√àGLEMENT OFFICIEL DE LA GUILDE EVOLUTION ‚Äì √âdition du 19/02/2025\n\n"
            "‚ÄúEnsemble, nous √©voluerons plus vite que seuls.‚Äù\n\n"
            "Bienvenue au sein de la guilde Evolution‚ÄØ! Nous sommes heureux de t‚Äôaccueillir "
            "dans notre communaut√©. Ce r√®glement est con√ßu pour assurer une ambiance conviviale, "
            "respectueuse et motivante, tout en permettant √† chacun de progresser selon son rythme "
            "et ses envies. Veille √† bien le lire et √† l‚Äôappliquer : chaque membre y contribue pour "
            "faire de cette guilde un endroit agr√©able o√π jouer ensemble.\n\n"
            "=====================================================================\n"
            "VALEURS & VISION\n"
            "=====================================================================\n"
            "‚Ä¢ Convivialit√© & Partage : Respect, bonne humeur, entraide.\n"
            "‚Ä¢ Progression Collective : Chaque point d‚ÄôXP que tu apportes compte.\n"
            "‚Ä¢ Transparence & Communication : Annonces sur Discord, canaux d√©di√©s, etc.\n\n"
            "=====================================================================\n"
            "RESPECT & CONVIVIALIT√â ü§ù\n"
            "=====================================================================\n"
            "‚Ä¢ Aucune insulte, harc√®lement ou discriminations (racisme, sexisme‚Ä¶) n‚Äôest tol√©r√©.\n"
            "‚Ä¢ Politesse et bienveillance : dire ‚ÄúBonjour‚Äù, rester courtois m√™me en cas de d√©saccord.\n"
            "‚Ä¢ Gestion des conflits : pr√©viens le Staff, ou discutez en MP pour calmer la tension.\n\n"
            "=====================================================================\n"
            "DISCORD OBLIGATOIRE & COMMUNICATION üó£Ô∏è\n"
            "=====================================================================\n"
            "‚Ä¢ L‚Äôusage de Discord est indispensable pour suivre les infos, annonces, sondages.\n"
            "‚Ä¢ Canaux importants : #general, #annonces, #entraide, #organisation.\n"
            "‚Ä¢ Commande !ticket pour contacter le Staff en priv√©.\n\n"
            "=====================================================================\n"
            "PARTICIPATION & VIE DE GUILDE üåç\n"
            "=====================================================================\n"
            "‚Ä¢ Pr√©sence r√©guli√®re (m√™me br√®ve) pour maintenir le lien.\n"
            "‚Ä¢ Organisation d‚Äô√©v√©nements (Donjons, chasses, soir√©es quizz).\n"
            "‚Ä¢ Entraide : Partage d‚Äôastuces, d‚Äôaccompagnements en donjons.\n\n"
            "=====================================================================\n"
            "PERCEPTEURS & RESSOURCES üè∞\n"
            "=====================================================================\n"
            "‚Ä¢ Droit de pose d‚Äôun Percepteur : d√®s 500‚ÄØ000‚ÄØXP de contribution guilde.\n"
            "‚Ä¢ D√©fense : tout le monde est invit√© √† d√©fendre un perco attaqu√©.\n"
            "‚Ä¢ Communication : coordonnez-vous sur Discord pour √©viter les conflits de zone.\n\n"
            "=====================================================================\n"
            "CONTRIBUTION D‚ÄôXP √Ä LA GUILDE üìä\n"
            "=====================================================================\n"
            "‚Ä¢ Taux d‚ÄôXP flexible entre 1 % et 99 % (0 % interdit sauf d√©rogation via !ticket).\n"
            "‚Ä¢ 1‚ÄØ% minimum : un effort collectif tr√®s l√©ger, mais utile pour la guilde.\n\n"
            "=====================================================================\n"
            "RECRUTEMENT & NOUVEAUX MEMBRES üîë\n"
            "=====================================================================\n"
            "‚Ä¢ Invitations contr√¥l√©es (Staff/v√©t√©rans).\n"
            "‚Ä¢ P√©riode d‚Äôessai possible (2-3 jours).\n"
            "‚Ä¢ Discord obligatoire.\n\n"
            "=====================================================================\n"
            "ORGANISATION INTERNE & STAFF üõ°Ô∏è\n"
            "=====================================================================\n"
            "‚Ä¢ Fusion des r√¥les de tr√©soriers, bras droits, etc. Tous sont ‚ÄúStaff‚Äù.\n"
            "‚Ä¢ Le Staff g√®re le recrutement, la mod√©ration et l‚Äôanimation.\n"
            "‚Ä¢ Meneur = d√©cision finale mais fait confiance au Staff.\n\n"
            "=====================================================================\n"
            "SANCTIONS & DISCIPLINE ‚ö†Ô∏è\n"
            "=====================================================================\n"
            "‚Ä¢ Avertissements progressifs et d√©cisions coll√©giales pour les cas graves.\n"
            "‚Ä¢ Transparence : le joueur concern√© est inform√© des raisons.\n\n"
            "=====================================================================\n"
            "MULTI-GUILDE üîÑ\n"
            "=====================================================================\n"
            "‚Ä¢ Tol√©r√© si √ßa ne nuit pas √† Evolution. Conflits d‚Äôint√©r√™t √† discuter avec le Staff.\n"
            "‚Ä¢ Le Staff doit √™tre fid√®le √† Evolution.\n\n"
            "=====================================================================\n"
            "√âV√âNEMENTS, SONDAGES & ANIMATIONS üéâ\n"
            "=====================================================================\n"
            "‚Ä¢ Utiliser !sondage <Titre> ; <Choix1> ; ... ; temps=JJ:HH:MM> pour cr√©er un sondage (#annonces).\n"
            "‚Ä¢ !activite creer <Titre> <JJ/MM/AAAA HH:MM> [desc] : Cr√©e une activit√© (donjon/sortie).\n"
            "‚Ä¢ Concours, cadeaux, etc.\n\n"
            "=====================================================================\n"
            "CONCLUSION & AVENIR üéá\n"
            "=====================================================================\n"
            "‚Ä¢ Bienvenue chez Evolution‚ÄØ! Merci de respecter ces r√®gles.\n"
            "‚Ä¢ Toute suggestion d‚Äôam√©lioration est la bienvenue.\n\n"
            "R√®glement en vigueur √† compter du 21/02/2025.\n"
            "‚ÄúLe v√©ritable pouvoir d‚Äôune guilde se r√©v√®le lorsque tous ses membres unissent leurs forces.‚Äù\n\n"
            "=====================================================================\n"
            "LISTE DES COMMANDES DU BOT EVOLUTION (D√âTAILL√âES)\n"
            "=====================================================================\n"
            "üìå **Mini-Guides & Commandes Racines**\n"
            "‚Ä¢ __!ia__ : Guide sur l‚ÄôIA (ex.: !bot, !analyse).\n"
            "‚Ä¢ __!membre__ : R√©cap global des sous-commandes (ex.: principal, addmule).\n"
            "‚Ä¢ __!job__ : Guide des sous-commandes li√©es aux m√©tiers (ex.: !job me, !job liste).\n"
            "‚Ä¢ __!rune__ : Outil de calcul (probabilit√©s runes). Fonctionnalit√© partielle.\n"
            "‚Ä¢ __!regles__ : R√©sum√© simplifi√© du r√®glement d'Evolution.\n\n"
            "üìå **Commandes G√©n√©rales**\n"
            "‚Ä¢ __!ping__ : V√©rifie que le bot r√©pond (latence ¬´ Pong! ¬ª).\n"
            "‚Ä¢ __!scan <URL>__ *(Defender)* : Analyse un lien (Safe Browsing/VirusTotal) et supprime la commande.\n"
            "‚Ä¢ __!rune jet <valeur_jet> <stat>__ : Calcule les probabilit√©s d'obtenir des runes (ex.: !rune jet 30 force).\n\n"
            "üìå **Commandes Membres**\n"
            "‚Ä¢ __!membre principal <NomPerso>__ : D√©finit ou met √† jour votre personnage principal.\n"
            "‚Ä¢ __!membre addmule <NomMule>__ : Ajoute une mule √† votre fiche.\n"
            "‚Ä¢ __!membre delmule <NomMule>__ : Retire une mule.\n"
            "‚Ä¢ __!membre moi__ : Affiche votre fiche (principal + mules).\n"
            "‚Ä¢ __!membre liste__ : Liste tous les joueurs, leurs persos et leurs mules.\n"
            "‚Ä¢ __!membre <pseudo_ou_mention>__ : Affiche la fiche d'un joueur pr√©cis.\n\n"
            "üìå **Commandes Job**\n"
            "‚Ä¢ __!job me__ : Affiche vos m√©tiers et niveaux.\n"
            "‚Ä¢ __!job liste__ : Liste compl√®te des m√©tiers et qui les poss√®de.\n"
            "‚Ä¢ __!job liste metier__ : Affiche la liste des noms de m√©tiers recens√©s.\n"
            "‚Ä¢ __!job <pseudo>__ : Donne les m√©tiers d'un joueur.\n"
            "‚Ä¢ __!job <job_name>__ : Indique qui poss√®de ce m√©tier (ex.: !job Paysan).\n"
            "‚Ä¢ __!job <job_name> <niveau>__ : Ajoute ou modifie l‚Äôun de vos m√©tiers (ex.: !job Boulanger 100).\n\n"
            "üìå **Commande Ticket**\n"
            "‚Ä¢ __!ticket__ : Lance en MP une proc√©dure pour contacter le Staff (probl√®me, aide, suggestion‚Ä¶).\n\n"
            "üìå **Commandes IA**\n"
            "‚Ä¢ __!bot <message>__ : Fait appel √† l‚ÄôIA (gemini-1.5-pro) avec le contexte des derniers messages.\n"
            "‚Ä¢ __!analyse__ : Analyse/r√©sume les 100 derniers messages du salon.\n\n"
            "üìå **Commandes Sondage**\n"
            "‚Ä¢ __!sondage <Titre> ; <Choix1> ; ... ; temps=JJ:HH:MM>__ : Cr√©e un sondage (#annonces) avec mention @everyone.\n"
            "‚Ä¢ __!close_sondage <message_id>__ : Cl√¥ture manuellement le sondage (affiche r√©sultats).\n\n"
            "üìå **Commandes Activit√©s**\n"
            "‚Ä¢ __!activite creer <Titre> <JJ/MM/AAAA HH:MM> [desc]__ : Cr√©e une activit√© (donjon/sortie) + r√¥le √©ph√©m√®re.\n"
            "‚Ä¢ __!activite liste__ : Affiche les activit√©s √† venir (limite 8 participants).\n"
            "‚Ä¢ __!activite info <id>__ : Affiche les d√©tails d‚Äôune activit√© (date, organisateur, participants‚Ä¶).\n"
            "‚Ä¢ __!activite join <id> / !activite leave <id>__ : S'inscrire ou se d√©sinscrire.\n"
            "‚Ä¢ __!activite annuler <id> / !activite modifier <id>__ : Annule ou modifie (date/description) une activit√©.\n\n"
            "üìå **Commandes Staff (R√¥le requis)**\n"
            "‚Ä¢ __!staff__ : Liste des membres Staff enregistr√©s/mentionn√©s.\n"
            "‚Ä¢ __!annonce <texte>__ : Publie une annonce styl√©e dans #annonces (mention @everyone).\n"
            "‚Ä¢ __!event <texte>__ : Organise un √©v√©nement, publi√© dans #organisation (mention Membre valid√©).\n"
            "‚Ä¢ __!recrutement <pseudo>__ : Ajoute un nouveau joueur dans la base.\n"
            "‚Ä¢ __!membre del <pseudo>__ : Supprime un joueur (et ses mules) de la base.\n\n"
            "=====================================================================\n"
            "Pour toute question, mentionnez @EvolutionBOT ou utilisez !bot <message>.\n"
            "=====================================================================\n"
        )

    async def generate_content_async(self, model, prompt: str):
        """
        Ex√©cute la g√©n√©ration de contenu de mani√®re asynchrone
        en d√©l√©guant l‚Äôappel de la fonction de g√©n√©ration √† un executor.
        """
        loop = asyncio.get_running_loop()

        def sync_call():
            return model.generate_content(prompt)

        return await loop.run_in_executor(None, sync_call)

    async def generate_content_with_fallback_async(self, prompt: str):
        """
        Tente d'appeler d'abord le mod√®le Pro.
        En cas de quota d√©pass√© (429) ou indisponibilit√©, on tente Flash.
        Si Flash √©choue aussi avec 429, on bloque le bot.
        
        Retourne un tuple (response_obj, model_label) o√π model_label ‚àà {"PRO", "FLASH"}.
        """
        # 1) Tentative avec PRO
        try:
            response_obj = await self.generate_content_async(self.model_pro, prompt)
            return response_obj, "PRO"
        except Exception as e_pro:
            self.logger.warning(f"[Fallback] √âchec Pro : {e_pro}")

            # V√©rifie s'il s'agit d'un d√©passement de quota (429) ou de toute indisponibilit√©
            if "429" in str(e_pro) or "quota" in str(e_pro).lower() or "unavailable" in str(e_pro).lower():
                # 2) Fallback : on tente le mod√®le FLASH
                self.logger.info("[Fallback] Tentative avec Flash...")
                try:
                    response_obj = await self.generate_content_async(self.model_flash, prompt)
                    return response_obj, "FLASH"
                except Exception as e_flash:
                    self.logger.error(f"[Fallback] √âchec Flash √©galement : {e_flash}")
                    # Si Flash √©choue aussi avec 429 => on bloque
                    if "429" in str(e_flash):
                        self.logger.error("[Fallback] Pro & Flash => 429 => blocage")
                        self.quota_exceeded_until = time.time() + self.quota_block_duration
                        raise e_flash
                    # Sinon, on relance l'exception Flash telle quelle
                    raise e_flash
            else:
                # Si ce n'est pas un 429 / indisponibilit√©, on relance
                raise e_pro

    @commands.command(name="ia")
    async def ia_help_command(self, ctx: commands.Context):
        """
        Affiche un r√©capitulatif des diff√©rentes commandes IA disponibles.
        """
        help_text = (
            "**Commandes IA disponibles :**\n"
            "!annonce <texte> : (Staff) Annonce styl√©e (#annonces)\n"
            "!analyse        : Rapport complet du salon (Gemini 1.5 Pro)\n"
            "!bot <message>  : Poser une question libre (Gemini 1.5 Pro)\n"
            "!event <texte>  : (Staff) Organiser une sortie (#organisation)\n"
            "!pl <texte>     : Annonce de PL/ronde sasa (#xplock-rondesasa-ronde)\n"
            "\n"
            "Mentionnez @EvolutionBOT n'importe o√π dans votre message pour poser une question √† l'IA.\n"
            "Utilisez !ia pour revoir ce guide."
        )
        await ctx.send(help_text)

    @commands.command(name="bot")
    async def free_command(self, ctx: commands.Context, *, user_message: str = None):
        """
        Commande libre : l‚Äôutilisateur peut poser une question et recevoir
        une r√©ponse g√©n√©r√©e par Gemini 1.5 Pro (fallback vers Flash si quota d√©pass√©).
        """
        if not user_message:
            await ctx.send(
                "Veuillez pr√©ciser un message apr√®s la commande. Par exemple :\n"
                "!bot Explique-moi comment fonctionne l'intelligence artificielle."
            )
            return

        # V√©rifie le blocage global (si Pro & Flash ont √©chou√© r√©cemment)
        if time.time() < self.quota_exceeded_until:
            wait_secs = int(self.quota_exceeded_until - time.time())
            await ctx.send(f"**Quota IA d√©pass√©** (Pro & Flash). R√©essayez dans ~{wait_secs} s, svp.")
            return

        system_text = (
            "Tu es EvolutionBOT, l'assistant IA du serveur Discord de la guilde Evolution sur Dofus Retro. "
            "Tu r√©ponds de mani√®re professionnelle et chaleureuse aux questions pos√©es. "
            "Si le contexte est trop volumineux, concentre-toi sur la derni√®re question pos√©e."
        )

        knowledge_text = self.knowledge_text

        history_messages = []
        async for msg in ctx.channel.history(limit=self.history_limit):
            if msg.author.bot:
                continue
            history_messages.append(msg)

        history_messages.sort(key=lambda m: m.created_at)

        history_text = "".join(
            f"{msg.author.display_name}: {msg.content.replace(chr(10), ' ')}\n"
            for msg in history_messages
        )

        combined_prompt = (
            f"{system_text}\n\n"
            f"Connaissances permanentes du bot (R√®glement + Commandes) :\n{knowledge_text}\n\n"
            f"Contexte (jusqu'√† {self.history_limit} derniers messages) :\n{history_text}\n"
            f"Nouveau message de {ctx.author.display_name}: {user_message}"
        )

        # V√©rifie la taille
        if len(combined_prompt) > self.max_prompt_size:
            surplus = len(combined_prompt) - self.max_prompt_size
            needed_len = len(history_text) - surplus
            if needed_len > 0:
                history_text = history_text[-needed_len:]
            else:
                history_text = ""

            combined_prompt = (
                f"{system_text}\n\n"
                f"Connaissances permanentes du bot (R√®glement + Commandes) :\n{knowledge_text}\n\n"
                f"Contexte (tronqu√©) :\n{history_text}\n"
                f"Nouveau message de {ctx.author.display_name}: {user_message}"
            )

        self.logger.debug(f"[Bot Command] {ctx.author}: {user_message}")
        self.logger.debug(f"[DEBUG] Longueur finale du prompt = {len(combined_prompt)}")

        try:
            response, model_used = await self.generate_content_with_fallback_async(combined_prompt)
            if response and hasattr(response, "text"):
                reply_text = response.text.strip() or "**(R√©ponse vide)**"
                await ctx.send(f"**R√©ponse IA [{model_used}] :**")
                for chunk in chunkify(reply_text, 2000):
                    await ctx.send(chunk)
            else:
                await ctx.send("Aucune r√©ponse valide n'a √©t√© re√ßue du mod√®le Gemini.")
        except Exception as e:
            if "429" in str(e):
                await ctx.send(
                    ":warning: **Erreur 429** - Quota d√©pass√© (Pro & Flash). Bloquons pendant un moment..."
                )
            else:
                await ctx.send(f"Une erreur s'est produite lors de la g√©n√©ration du contenu. (D√©tails: {e})")
            self.logger.error(f"Erreur lors de l'appel IA avec fallback: {e}")

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """
        Listener qui intercepte les messages contenant la mention du bot,
        afin de d√©clencher automatiquement la commande libre si quelqu‚Äôun
        interpelle le bot directement dans une conversation.
        """
        if message.author.bot:
            return

        ctx = await self.bot.get_context(message)
        if ctx.valid and ctx.command is not None:
            return

        if self.bot.user.mention in message.content:
            query = message.content.replace(self.bot.user.mention, "").strip()
            if query:
                new_ctx = await self.bot.get_context(message)
                await self.free_command(new_ctx, user_message=query)

    @commands.command(name="analyse")
    async def analyse_command(self, ctx: commands.Context):
        """
        G√©n√®re un rapport analysant les messages r√©cents d‚Äôun salon (limit√© √† 100 messages).
        Fallback (Pro/Flash) si quota 429.
        """
        limit_messages = 100
        history_messages = []
        async for msg in ctx.channel.history(limit=limit_messages):
            if msg.author.bot:
                continue
            history_messages.append(msg)

        history_messages.sort(key=lambda m: m.created_at)
        history_text = "".join(
            f"{msg.author.display_name}: {msg.content.replace(chr(10), ' ')}\n"
            for msg in history_messages
        )

        system_text = (
            "Tu es EvolutionBOT, une IA charg√©e de faire un rapport sur l'activit√© r√©cente. "
            "Analyse les sujets importants, l'ambiance g√©n√©rale, etc."
        )

        combined_prompt = f"{system_text}\n\n{history_text}"

        try:
            await ctx.message.delete()
        except Exception:
            pass

        if time.time() < self.quota_exceeded_until:
            wait_secs = int(self.quota_exceeded_until - time.time())
            await ctx.send(f"**Quota IA d√©pass√©**. R√©essayez dans ~{wait_secs} s, svp.")
            return

        try:
            response, model_used = await self.generate_content_with_fallback_async(combined_prompt)
            if response and hasattr(response, "text"):
                reply_text = response.text.strip() or "**(Rapport vide)**"
                await ctx.send(f"**Rapport d'analyse [{model_used}] :**")
                for chunk in chunkify(reply_text, 2000):
                    await ctx.send(chunk)
            else:
                await ctx.send("Aucune r√©ponse produite par l‚ÄôIA.")
        except Exception as e:
            if "429" in str(e):
                await ctx.send(":warning: Erreur 429 - Quota d√©pass√© (Pro & Flash).")
            else:
                await ctx.send("Erreur lors de l'analyse. " + str(e))
            self.logger.error(f"Erreur IA fallback pour !analyse : {e}")

    @commands.has_role("Staff")
    @commands.command(name="annonce")
    async def annonce_command(self, ctx: commands.Context, *, user_message: str = None):
        """
        Commande Staff. G√©n√®re une annonce plus fun/famili√®re, tout en restant officielle,
        pour #annonces. Le message final commence par '@everyone'.
        Fallback Pro/Flash si quota satur√©.
        """
        if not user_message:
            await ctx.send(
                "Veuillez pr√©ciser le contenu de l'annonce. Ex :\n"
                "!annonce Ev√©nement captures Tot samedi soir √† 21h."
            )
            return

        annonce_channel = discord.utils.get(ctx.guild.text_channels, name=self.annonce_channel_name)
        if not annonce_channel:
            await ctx.send(f"Le canal #{self.annonce_channel_name} est introuvable.")
            return

        if time.time() < self.quota_exceeded_until:
            wait_secs = int(self.quota_exceeded_until - time.time())
            await ctx.send(f"**Quota IA d√©pass√©** (Pro & Flash). R√©essayez dans ~{wait_secs} s, svp.")
            return

        # Nouveau system_text : plus fun/familier mais un poil officiel
        system_text = (
            "Tu es EvolutionBOT, l'IA charg√©e de r√©diger des annonces pour la guilde Evolution (Dofus Retro). "
            "Rends l'annonce √† la fois fun et chaleureuse, tout en conservant un ton officiel minimal. "
            "Commence le message par '@everyone'."
        )
        combined_prompt = f"{system_text}\n\nContenu de l'annonce : {user_message}"

        try:
            await ctx.message.delete()
        except (discord.Forbidden, discord.HTTPException):
            pass

        try:
            response, model_used = await self.generate_content_with_fallback_async(combined_prompt)
            if response and hasattr(response, "text"):
                reply_text = response.text.strip() or "**(Annonce vide)**"
                await annonce_channel.send(f"**Annonce [{model_used}] :**")
                for chunk in chunkify(reply_text, 2000):
                    await annonce_channel.send(chunk)
            else:
                await ctx.send("Aucune annonce n'a pu √™tre g√©n√©r√©e.")
        except Exception as e:
            if "429" in str(e):
                await ctx.send(":warning: **Erreur 429** - Quota d√©pass√© (Pro & Flash).")
            else:
                await ctx.send("Une erreur est survenue lors de la g√©n√©ration de l'annonce.")
            self.logger.error(f"Erreur IA fallback pour !annonce : {e}")

    @commands.has_role("Staff")
    @commands.command(name="event")
    async def event_command(self, ctx: commands.Context, *, user_message: str = None):
        """
        Commande Staff. G√©n√®re un message d‚Äô√©v√©nement (#organisation) pour la guilde.
        Mentionne 'Membre valid√© d'Evolution' √† la fin. Fallback Pro/Flash si 429.
        """
        if not user_message:
            await ctx.send(
                "Veuillez pr√©ciser le contenu de l'√©v√©nement. Ex :\n"
                "!event Proposition de donjon, sortie, raid, etc."
            )
            return

        event_channel = discord.utils.get(ctx.guild.text_channels, name=self.event_channel_name)
        if not event_channel:
            await ctx.send(f"Le canal #{self.event_channel_name} est introuvable.")
            return

        if time.time() < self.quota_exceeded_until:
            wait_secs = int(self.quota_exceeded_until - time.time())
            await ctx.send(f"**Quota IA d√©pass√©** (Pro & Flash). R√©essayez dans ~{wait_secs} s, svp.")
            return

        system_text = (
            "Tu es une IA experte en r√©daction d'annonces d'√©v√©nements pour la guilde Evolution (Dofus Retro). "
            "R√©dige un message final incitant les membres √† participer : pr√©cise le titre, la date/heure, "
            "et invite-les √† rejoindre."
        )
        combined_prompt = f"{system_text}\n\nContenu fourni : {user_message}"

        try:
            await ctx.message.delete()
        except (discord.Forbidden, discord.HTTPException):
            pass

        try:
            response, model_used = await self.generate_content_with_fallback_async(combined_prompt)
            if response and hasattr(response, "text"):
                reply_text = response.text.strip() or "**(√âv√©nement vide)**"
                await event_channel.send(f"**Nouvel √âv√©nement [{model_used}] :**")
                for chunk in chunkify(reply_text, 2000):
                    await event_channel.send(chunk)

                # Mention du r√¥le 'Membre valid√© d'Evolution'
                role_valide = discord.utils.get(ctx.guild.roles, name="Membre valid√© d'Evolution")
                if role_valide:
                    await event_channel.send(role_valide.mention)
                else:
                    await event_channel.send("*R√¥le 'Membre valid√© d'Evolution' introuvable.*")
            else:
                await ctx.send("Aucun √©v√©nement n'a pu √™tre g√©n√©r√© par l'IA.")
        except Exception as e:
            if "429" in str(e):
                await ctx.send(":warning: **Erreur 429** - Quota d√©pass√© (Pro & Flash).")
            else:
                await ctx.send("Une erreur est survenue lors de la g√©n√©ration de l'√©v√©nement.")
            self.logger.error(f"Erreur IA fallback pour !event : {e}")

    @commands.command(name="pl")
    async def pl_command(self, ctx: commands.Context, *, user_message: str = None):
        """
        Commande pour publier une annonce de PL ou Ronde Sasa (#xplock-rondesasa-ronde).
        Fallback Pro/Flash si 429.
        """
        if not user_message:
            await ctx.send(
                "Veuillez pr√©ciser le contenu de votre annonce PL. Par exemple :\n"
                "!pl Ronde Kimbo x10 captures, tarif 100.000k la place, d√©part samedi 15/02 √† 14h."
            )
            return

        pl_channel = discord.utils.get(ctx.guild.text_channels, name=self.pl_channel_name)
        if not pl_channel:
            await ctx.send(f"Le canal #{self.pl_channel_name} est introuvable.")
            return

        if time.time() < self.quota_exceeded_until:
            wait_secs = int(self.quota_exceeded_until - time.time())
            await ctx.send(f"**Quota IA d√©pass√©** (Pro & Flash). R√©essayez dans ~{wait_secs} s, svp.")
            return

        system_text = (
            "Tu es EvolutionBOT, une IA experte en r√©daction d'annonces de PL ou Ronde Sasa pour la guilde Evolution. "
            "Lorsque je te fournis une proposition (type 'Kimbo x10, tarifs, horaires'), r√©dige un message d'annonce "
            "unique, clair et incitant √† participer. Le message doit √™tre pr√™t √† poster sur #xplock-rondesasa-ronde."
        )
        combined_prompt = f"{system_text}\n\nContenu fourni : {user_message}"

        try:
            await ctx.message.delete()
        except (discord.Forbidden, discord.HTTPException):
            pass

        try:
            response, model_used = await self.generate_content_with_fallback_async(combined_prompt)
            if response and hasattr(response, "text"):
                reply_text = response.text.strip() or "**(Annonce PL vide ou non g√©n√©r√©e)**"
                await pl_channel.send(f"**Nouvelle Annonce PL [{model_used}] :**")
                for chunk in chunkify(reply_text, 2000):
                    await pl_channel.send(chunk)
            else:
                await ctx.send("L'IA n'a pas pu g√©n√©rer d'annonce PL.")
        except Exception as e:
            if "429" in str(e):
                await ctx.send(":warning: **Erreur 429** - Quota d√©pass√© (Pro & Flash).")
            else:
                await ctx.send("Une erreur est survenue lors de la g√©n√©ration de l'annonce PL.")
            self.logger.error(f"Erreur IA fallback pour !pl : {e}")

async def setup(bot: commands.Bot):
    """
    Fonction d‚Äôinitialisation du Cog dans le bot.
    """
    await bot.add_cog(IACog(bot))
