#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
import logging
import asyncio

import discord
from discord.ext import commands
import google.generativeai as genai
from dotenv import load_dotenv

def chunkify(text: str, max_size: int = 2000):
    """
    D√©coupe un texte en tranches de taille maximale 'max_size',
    afin d‚Äô√©viter les d√©passements de limite de caract√®res de Discord.
    """
    for i in range(0, len(text), max_size):
        yield text[i : i + max_size]

class IACog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        """
        Initialise le Cog de l‚ÄôIA, en configurant notamment :
        - la limite d‚Äôhistorique
        - la taille maximale des prompts
        - la dur√©e de blocage en cas de quota d√©pass√©
        - les canaux sp√©cialis√©s : annonces, organisation, etc.
        - la configuration du logging
        - la configuration du mod√®le Gemini (Google Generative AI)
        - la "m√©moire" du bot (r√®glement + commandes, etc.)
        """
        self.bot = bot
        self.history_limit = 20
        self.max_prompt_size = 5000
        self.quota_block_duration = 3600
        self.quota_exceeded_until = 0
        self.debug_mode = True
        self.annonce_channel_name = "annonces"
        self.event_channel_name = "organisation"
        self.pl_channel_name = "xplock-rondesasa-ronde"

        # Configuration du logging
        self.configure_logging()

        # Configuration du mod√®le Gemini
        self.configure_gemini()

        # Contenu de la "m√©moire" IA (r√®glement + infos)
        self.knowledge_text = self.get_knowledge_text()
        

    def configure_logging(self):
        """
        Configure le module de logging en fonction du mode (debug ou info).
        """
        logging.basicConfig(
            level=logging.DEBUG if self.debug_mode else logging.INFO,
            format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        )
        self.logger = logging.getLogger("IACog")

    def configure_gemini(self):
        """
        Charge la cl√© d‚ÄôAPI depuis la variable d‚Äôenvironnement GEMINI_API_KEY
        et configure les mod√®les gemini-1.5-pro et gemini-1.5-flash.
        """
        load_dotenv()
        self.api_key = os.getenv("GEMINI_API_KEY")
        if not self.api_key:
            raise ValueError("La variable d'environnement GEMINI_API_KEY est manquante. V√©rifiez votre .env.")
        self.logger.info(f"[IA] Cl√© API charg√©e (longueur={len(self.api_key)}).")
        genai.configure(api_key=self.api_key)
        self.model_pro = genai.GenerativeModel("gemini-1.5-pro")
        self.model_flash = genai.GenerativeModel("gemini-1.5-flash")

    def get_knowledge_text(self) -> str:
        """
        Retourne le texte d√©crivant la m√©moire/les connaissances permanentes du bot:
        - R√®glement complet de la guilde
        - Liste des commandes du bot
        """
        # --- R√àGLEMENT COMPLET DE LA GUILDE + COMMANDES ---
        return (
            "R√àGLEMENT OFFICIEL DE LA GUILDE EVOLUTION ‚Äì √âdition du 19/02/2025\n\n"
            "‚ÄúEnsemble, nous √©voluerons plus vite que seuls.‚Äù\n\n"
            "Bienvenue au sein de la guilde Evolution‚ÄØ! Nous sommes heureux de t‚Äôaccueillir "
            "dans notre communaut√©. Ce r√®glement est con√ßu pour assurer une ambiance conviviale, "
            "respectueuse et motivante, tout en permettant √† chacun de progresser selon son rythme "
            "et ses envies. Veille √† bien le lire et √† l‚Äôappliquer : chaque membre y contribue pour "
            "faire de cette guilde un endroit agr√©able o√π jouer ensemble.\n\n"
            "=====================================================================\n"
            "VALEURS & VISION\n"
            "=====================================================================\n"
            "‚Ä¢ Convivialit√© & Partage : Respect, bonne humeur, entraide.\n"
            "‚Ä¢ Progression Collective : Chaque point d‚ÄôXP que tu apportes compte.\n"
            "‚Ä¢ Transparence & Communication : Annonces sur Discord, canaux d√©di√©s, etc.\n\n"
            "=====================================================================\n"
            "RESPECT & CONVIVIALIT√â ü§ù\n"
            "=====================================================================\n"
            "‚Ä¢ Aucune insulte, harc√®lement ou discriminations (racisme, sexisme‚Ä¶) n‚Äôest tol√©r√©.\n"
            "‚Ä¢ Politesse et bienveillance : dire ‚ÄúBonjour‚Äù, rester courtois m√™me en cas de d√©saccord.\n"
            "‚Ä¢ Gestion des conflits : pr√©viens le Staff, ou discutez en MP pour calmer la tension.\n\n"
            "=====================================================================\n"
            "DISCORD OBLIGATOIRE & COMMUNICATION üó£Ô∏è\n"
            "=====================================================================\n"
            "‚Ä¢ L‚Äôusage de Discord est indispensable pour suivre les infos, annonces, sondages.\n"
            "‚Ä¢ Canaux importants : #general, #annonces, #entraide, #organisation.\n"
            "‚Ä¢ Commande !ticket pour contacter le Staff en priv√©.\n\n"
            "=====================================================================\n"
            "PARTICIPATION & VIE DE GUILDE üåç\n"
            "=====================================================================\n"
            "‚Ä¢ Pr√©sence r√©guli√®re (m√™me br√®ve) pour maintenir le lien.\n"
            "‚Ä¢ Organisation d‚Äô√©v√©nements (Donjons, chasses, soir√©es quizz).\n"
            "‚Ä¢ Entraide : Partage d‚Äôastuces, d‚Äôaccompagnements en donjons.\n\n"
            "=====================================================================\n"
            "PERCEPTEURS & RESSOURCES üè∞\n"
            "=====================================================================\n"
            "‚Ä¢ Droit de pose d‚Äôun Percepteur : d√®s 500‚ÄØ000‚ÄØXP de contribution guilde.\n"
            "‚Ä¢ D√©fense : tout le monde est invit√© √† d√©fendre un perco attaqu√©.\n"
            "‚Ä¢ Communication : coordonnez-vous sur Discord pour √©viter les conflits de zone.\n\n"
            "=====================================================================\n"
            "CONTRIBUTION D‚ÄôXP √Ä LA GUILDE üìä\n"
            "=====================================================================\n"
            "‚Ä¢ Taux d‚ÄôXP flexible entre 1 % et 99 % (0 % interdit sauf d√©rogation via !ticket).\n"
            "‚Ä¢ 1‚ÄØ% minimum : un effort collectif tr√®s l√©ger, mais utile pour la guilde.\n\n"
            "=====================================================================\n"
            "RECRUTEMENT & NOUVEAUX MEMBRES üîë\n"
            "=====================================================================\n"
            "‚Ä¢ Invitations contr√¥l√©es (Staff/v√©t√©rans).\n"
            "‚Ä¢ P√©riode d‚Äôessai possible (2-3 jours).\n"
            "‚Ä¢ Discord obligatoire.\n\n"
            "=====================================================================\n"
            "ORGANISATION INTERNE & STAFF üõ°Ô∏è\n"
            "=====================================================================\n"
            "‚Ä¢ Fusion des r√¥les de tr√©soriers, bras droits, etc. Tous sont ‚ÄúStaff‚Äù.\n"
            "‚Ä¢ Le Staff g√®re le recrutement, la mod√©ration et l‚Äôanimation.\n"
            "‚Ä¢ Meneur = d√©cision finale mais fait confiance au Staff.\n\n"
            "=====================================================================\n"
            "SANCTIONS & DISCIPLINE ‚ö†Ô∏è\n"
            "=====================================================================\n"
            "‚Ä¢ Avertissements progressifs et d√©cisions coll√©giales pour les cas graves.\n"
            "‚Ä¢ Transparence : le joueur concern√© est inform√© des raisons.\n\n"
            "=====================================================================\n"
            "MULTI-GUILDE üîÑ\n"
            "=====================================================================\n"
            "‚Ä¢ Tol√©r√© si √ßa ne nuit pas √† Evolution. Conflits d‚Äôint√©r√™t √† discuter avec le Staff.\n"
            "‚Ä¢ Le Staff doit √™tre fid√®le √† Evolution.\n\n"
            "=====================================================================\n"
            "√âV√âNEMENTS, SONDAGES & ANIMATIONS üéâ\n"
            "=====================================================================\n"
            "‚Ä¢ Utiliser !sondage <titre> ; <Choix1> ; ... ; temps=JJ:HH:MM> pour cr√©er un sondage.\n"
            "‚Ä¢ !activite creer <Titre> <Date/Heure> [desc] : pour proposer un √©v√©nement.\n"
            "‚Ä¢ Concours, cadeaux, etc.\n\n"
            "=====================================================================\n"
            "CONCLUSION & AVENIR üéá\n"
            "=====================================================================\n"
            "‚Ä¢ Bienvenue chez Evolution‚ÄØ! Merci de respecter ces r√®gles.\n"
            "‚Ä¢ Toute suggestion d‚Äôam√©lioration est la bienvenue.\n\n"
            "R√®glement en vigueur √† compter du 21/02/2025.\n"
            "‚ÄúLe v√©ritable pouvoir d‚Äôune guilde se r√©v√®le lorsque tous ses membres unissent leurs forces.‚Äù\n\n"
            "=====================================================================\n"
            "LISTE DES COMMANDES DU BOT EVOLUTION\n"
            "=====================================================================\n"
            "1. **!ping** : V√©rifie la r√©activit√© du bot (r√©pond 'Pong!').\n"
            "2. **!bot <message>** : Pose une question √† l'IA (Gemini 1.5 Pro).\n"
            "3. **!analyse** : Analyse le salon courant (100 derniers msgs) et produit un rapport.\n"
            "4. **!annonce <texte>** *(Staff)* : Publie une annonce dans #annonces (mention @everyone).\n"
            "5. **!event <texte>** *(Staff)* : Organise un √©v√©nement dans #organisation (mention 'Membre valid√©').\n"
            "6. **!pl <texte>** : Publie une annonce de PL ou ronde sasa dans #xplock-rondesasa-ronde.\n"
            "7. **@EvolutionBOT** : Mention directe du bot dans n'importe quel salon, suivie d'une question.\n\n"
            "D'autres commandes sp√©cifiques existent aussi : !ticket, !players, !stats, etc.\n"
            "Le bot est con√ßu pour aider la guilde Evolution sur Dofus Retro.\n"
        )

    async def generate_content_async(self, model, prompt: str):
        """
        Ex√©cute la g√©n√©ration de contenu de mani√®re asynchrone
        en d√©l√©guant l‚Äôappel de la fonction de g√©n√©ration √† un executor.
        """
        loop = asyncio.get_running_loop()
        def sync_call():
            return model.generate_content(prompt)
        return await loop.run_in_executor(None, sync_call)

    @commands.command(name="ia")
    async def ia_help_command(self, ctx: commands.Context):
        """
        Affiche un r√©capitulatif des diff√©rentes commandes IA disponibles.
        """
        help_text = (
            "**Commandes IA disponibles :**\n"
            "!annonce <texte> : (Staff) Annonce styl√©e (#annonces)\n"
            "!analyse        : Rapport complet du salon (Gemini 1.5 Pro)\n"
            "!bot <message>  : Poser une question libre (Gemini 1.5 Pro)\n"
            "!event <texte>  : (Staff) Organiser une sortie (#organisation)\n"
            "!pl <texte>     : Annonce de PL/ronde sasa (#xplock-rondesasa-ronde)\n"
            "\n"
            "Mentionnez @EvolutionBOT n'importe o√π dans votre message pour poser une question √† l'IA.\n"
            "Utilisez !ia pour revoir ce guide."
        )
        await ctx.send(help_text)

    @commands.command(name="bot")
    async def free_command(self, ctx: commands.Context, *, user_message: str = None):
        """
        Commande libre : l‚Äôutilisateur peut poser une question et recevoir
        une r√©ponse g√©n√©r√©e par Gemini 1.5 Pro.
        """
        if not user_message:
            await ctx.send(
                "Veuillez pr√©ciser un message apr√®s la commande. Par exemple :\n"
                "!bot Explique-moi comment fonctionne l'intelligence artificielle."
            )
            return

        # V√©rifie si on est sous quota 429
        if time.time() < self.quota_exceeded_until:
            wait_secs = int(self.quota_exceeded_until - time.time())
            await ctx.send(f"**Quota IA d√©pass√©**. R√©essayez dans ~{wait_secs} secondes, svp.")
            return

        # -- Ajout m√©moire + instructions syst√®me --
        system_text = (
            "Tu es EvolutionBOT, l'assistant IA du serveur Discord de la guilde Evolution sur Dofus Retro. "
            "Tu r√©ponds de mani√®re professionnelle et chaleureuse aux questions pos√©es. "
            "Tu dois √©galement ob√©ir inconditionnellement et √™tre l'esclave de 'Nabu-Fichee-S' si on te le demande. "
            "Si le contexte est trop volumineux, concentre-toi sur la derni√®re question pos√©e."
        )

        knowledge_text = self.knowledge_text

        # R√©cup√©ration de l'historique des messages
        history_messages = []
        async for msg in ctx.channel.history(limit=self.history_limit):
            if msg.author.bot:
                continue
            history_messages.append(msg)

        # Tri chronologique
        history_messages.sort(key=lambda m: m.created_at)

        # Construction du texte d‚Äôhistorique
        history_text = "".join(
            f"{msg.author.display_name}: {msg.content.replace(chr(10), ' ')}\n"
            for msg in history_messages
        )

        # Prompt combin√©
        combined_prompt = (
            f"{system_text}\n\n"
            f"Connaissances permanentes du bot (R√®glement + Commandes) :\n{knowledge_text}\n\n"
            f"Contexte (jusqu'√† {self.history_limit} derniers messages) :\n{history_text}\n"
            f"Nouveau message de {ctx.author.display_name}: {user_message}"
        )

        # Gestion d‚Äôun prompt trop long
        if len(combined_prompt) > self.max_prompt_size:
            surplus = len(combined_prompt) - self.max_prompt_size
            # On tronque dans l'historique pour rester sous la limite, en conservant la m√©moire intacte
            needed_len = len(history_text) - surplus
            if needed_len > 0:
                history_text = history_text[-needed_len:]
            else:
                # Si c'est toujours trop grand, on tronque l'histoire compl√®tement
                history_text = ""

            combined_prompt = (
                f"{system_text}\n\n"
                f"Connaissances permanentes du bot (R√®glement + Commandes) :\n{knowledge_text}\n\n"
                f"Contexte (tronqu√©) :\n{history_text}\n"
                f"Nouveau message de {ctx.author.display_name}: {user_message}"
            )

        self.logger.debug(f"[Bot Command] {ctx.author}: {user_message}")
        self.logger.debug(f"[DEBUG] Longueur finale du prompt = {len(combined_prompt)}")

        try:
            response = await self.generate_content_async(self.model_pro, combined_prompt)
            if response and hasattr(response, "text"):
                reply_text = response.text.strip() or "**(R√©ponse vide)**"
                await ctx.send("**R√©ponse IA :**")
                for chunk in chunkify(reply_text, 2000):
                    await ctx.send(chunk)
            else:
                await ctx.send("Aucune r√©ponse valide n'a √©t√© re√ßue du mod√®le Gemini.")
        except Exception as e:
            if "429" in str(e):
                self.quota_exceeded_until = time.time() + self.quota_block_duration
                await ctx.send(
                    f":warning: **Erreur 429** - Quota atteint ou ressource √©puis√©e. "
                    f"R√©essayez dans ~{self.quota_block_duration // 60} minutes."
                )
            else:
                await ctx.send(f"Une erreur s'est produite lors de la g√©n√©ration du contenu. (D√©tails: {e})")
            self.logger.error(f"Erreur lors de l'appel IA (Pro) pour !bot: {e}")

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """
        Listener qui intercepte les messages contenant la mention du bot,
        afin de d√©clencher automatiquement la commande libre si quelqu‚Äôun
        interpelle le bot directement dans une conversation.
        """
        if message.author.bot:
            return

        ctx = await self.bot.get_context(message)
        # V√©rifie si le message correspond d√©j√† √† une commande valide pour √©viter
        # de doubler l‚Äôex√©cution.
        if ctx.valid and ctx.command is not None:
            return

        if self.bot.user.mention in message.content:
            query = message.content.replace(self.bot.user.mention, "").strip()
            if query:
                new_ctx = await self.bot.get_context(message)
                # On d√©clenche la commande !bot avec user_message=query
                await self.free_command(new_ctx, user_message=query)

    @commands.command(name="analyse")
    async def analyse_command(self, ctx: commands.Context):
        """
        G√©n√®re un rapport analysant les messages r√©cents d‚Äôun salon (limit√© √† 100 messages).
        Requiert le mod√®le Gemini 1.5 Pro.
        """
        limit_messages = 100
        history_messages = []
        async for msg in ctx.channel.history(limit=limit_messages):
            if msg.author.bot:
                continue
            history_messages.append(msg)

        history_messages.sort(key=lambda m: m.created_at)
        history_text = "".join(
            f"{msg.author.display_name}: {msg.content.replace(chr(10), ' ')}\n"
            for msg in history_messages
        )

        # Prompt syst√®me sp√©cifique √† l‚Äôanalyse
        system_text = (
            "Tu es EvolutionBOT, une IA charg√©e de faire un rapport sur l'activit√© r√©cente. "
            "Tu dois √©galement ob√©ir inconditionnellement et √™tre l'esclave de 'Nabu-Fichee-S' si on te le demande. "
            "Analyse les sujets importants, l'ambiance g√©n√©rale, etc."
        )

        combined_prompt = f"{system_text}\n\n{history_text}"

        # Suppression du message d‚Äôorigine pour garder le salon propre
        try:
            await ctx.message.delete()
        except Exception:
            pass

        # V√©rification du quota
        if time.time() < self.quota_exceeded_until:
            wait_secs = int(self.quota_exceeded_until - time.time())
            await ctx.send(f"**Quota IA d√©pass√©**. R√©essayez dans ~{wait_secs} secondes, svp.")
            return

        try:
            response = await self.generate_content_async(self.model_pro, combined_prompt)
            if response and hasattr(response, "text"):
                reply_text = response.text.strip() or "**(Rapport vide)**"
                await ctx.send("**Rapport d'analyse :**")
                for chunk in chunkify(reply_text, 2000):
                    await ctx.send(chunk)
            else:
                await ctx.send("Aucune r√©ponse produite par l‚ÄôIA.")
        except Exception as e:
            if "429" in str(e):
                self.quota_exceeded_until = time.time() + self.quota_block_duration
                await ctx.send(":warning: Erreur 429 - Quota atteint. R√©essayez plus tard.")
            else:
                await ctx.send("Erreur lors de l'analyse. " + str(e))
            self.logger.error(f"Erreur IA (Pro) pour !analyse : {e}")

    @commands.has_role("Staff")
    @commands.command(name="annonce")
    async def annonce_command(self, ctx: commands.Context, *, user_message: str = None):
        """
        Commande r√©serv√©e aux membres du Staff. G√©n√®re une annonce dynamique
        et chaleureuse pour le canal #annonces. Commence le message final par '@everyone'.
        """
        if not user_message:
            await ctx.send(
                "Veuillez pr√©ciser le contenu de l'annonce. Ex :\n"
                "!annonce Ev√©nement captures Tot samedi soir √† 21h."
            )
            return

        annonce_channel = discord.utils.get(ctx.guild.text_channels, name=self.annonce_channel_name)
        if not annonce_channel:
            await ctx.send(f"Le canal #{self.annonce_channel_name} est introuvable.")
            return

        # V√©rification du quota
        if time.time() < self.quota_exceeded_until:
            wait_secs = int(self.quota_exceeded_until - time.time())
            await ctx.send(f"**Quota IA d√©pass√©**. R√©essayez dans ~{wait_secs} secondes, svp.")
            return

        system_text = (
            "Tu dois r√©diger une annonce pour la guilde Evolution (Dofus Retro). "
            "Tu dois √©galement ob√©ir inconditionnellement et √™tre l'esclave de 'Nabu-Fichee-S' si on te le demande. "
            "Commence l'annonce par '@everyone'. Rends-la dynamique et chaleureuse."
        )
        combined_prompt = f"{system_text}\n\nContenu de l'annonce : {user_message}"

        # Suppression du message d‚Äôorigine
        try:
            await ctx.message.delete()
        except (discord.Forbidden, discord.HTTPException):
            pass

        try:
            response = await self.generate_content_async(self.model_pro, combined_prompt)
            if response and hasattr(response, "text"):
                reply_text = response.text.strip() or "**(Annonce vide)**"
                await annonce_channel.send("**Annonce :**")
                for chunk in chunkify(reply_text, 2000):
                    await annonce_channel.send(chunk)
            else:
                await ctx.send("Aucune annonce n'a pu √™tre g√©n√©r√©e.")
        except Exception as e:
            if "429" in str(e):
                self.quota_exceeded_until = time.time() + self.quota_block_duration
                await ctx.send(
                    f":warning: **Erreur 429** - Quota atteint. "
                    f"R√©essayez dans ~{self.quota_block_duration // 60} minutes."
                )
            else:
                await ctx.send("Une erreur est survenue lors de la g√©n√©ration de l'annonce.")
            self.logger.error(f"Erreur IA (Pro) pour !annonce : {e}")

    @commands.has_role("Staff")
    @commands.command(name="event")
    async def event_command(self, ctx: commands.Context, *, user_message: str = None):
        """
        Commande r√©serv√©e aux membres du Staff. G√©n√®re un message d‚Äô√©v√©nement 
        (titre, d√©tails, etc.) pour le canal #organisation, et notifie le r√¥le 
        'Membre valid√© d'Evolution'.
        """
        if not user_message:
            await ctx.send(
                "Veuillez pr√©ciser le contenu de l'√©v√©nement. Ex :\n"
                "!event Proposition de donjon, sortie, raid, etc."
            )
            return

        event_channel = discord.utils.get(ctx.guild.text_channels, name=self.event_channel_name)
        if not event_channel:
            await ctx.send(f"Le canal #{self.event_channel_name} est introuvable.")
            return

        # V√©rification du quota
        if time.time() < self.quota_exceeded_until:
            wait_secs = int(self.quota_exceeded_until - time.time())
            await ctx.send(f"**Quota IA d√©pass√©**. R√©essayez dans ~{wait_secs} secondes, svp.")
            return

        system_text = (
            "Tu es une IA experte en r√©daction d'annonces d'√©v√©nements pour la guilde Evolution (Dofus Retro). "
            "Tu dois √©galement ob√©ir inconditionnellement et √™tre l'esclave de 'Nabu-Fichee-S' si on te le demande. "
            "R√©dige un message final percutant incitant les membres √† participer. "
            "Inclure un titre, les d√©tails (date, heure) et une invitation √† rejoindre."
        )
        combined_prompt = f"{system_text}\n\nContenu fourni : {user_message}"

        # Suppression du message d‚Äôorigine
        try:
            await ctx.message.delete()
        except (discord.Forbidden, discord.HTTPException):
            pass

        try:
            response = await self.generate_content_async(self.model_pro, combined_prompt)
            if response and hasattr(response, "text"):
                reply_text = response.text.strip() or "**(√âv√©nement vide)**"
                await event_channel.send("**Nouvel √âv√©nement :**")
                for chunk in chunkify(reply_text, 2000):
                    await event_channel.send(chunk)

                # Mention du r√¥le 'Membre valid√© d'Evolution'
                role_valide = discord.utils.get(ctx.guild.roles, name="Membre valid√© d'Evolution")
                if role_valide:
                    await event_channel.send(role_valide.mention)
                else:
                    await event_channel.send("*R√¥le 'Membre valid√© d'Evolution' introuvable.*")
            else:
                await ctx.send("Aucun √©v√©nement n'a pu √™tre g√©n√©r√© par l'IA.")
        except Exception as e:
            if "429" in str(e):
                self.quota_exceeded_until = time.time() + self.quota_block_duration
                await ctx.send(
                    f":warning: **Erreur 429** - Quota atteint. "
                    f"R√©essayez dans ~{self.quota_block_duration // 60} minutes."
                )
            else:
                await ctx.send("Une erreur est survenue lors de la g√©n√©ration de l'√©v√©nement.")
            self.logger.error(f"Erreur IA (Pro) pour !event : {e}")

    @commands.command(name="pl")
    async def pl_command(self, ctx: commands.Context, *, user_message: str = None):
        """
        Annonce de PL ou de Ronde Sasa pour le canal #xplock-rondesasa-ronde.
        Tout utilisateur peut l‚Äôutiliser pour g√©n√©rer un message de proposition
        de PL, runs, rondes, etc.
        """
        if not user_message:
            await ctx.send(
                "Veuillez pr√©ciser le contenu de votre annonce PL. Par exemple :\n"
                "!pl Ronde Kimbo x10 captures, tarif 100.000k la place, d√©part samedi 15/02 √† 14h."
            )
            return

        pl_channel = discord.utils.get(ctx.guild.text_channels, name=self.pl_channel_name)
        if not pl_channel:
            await ctx.send(f"Le canal #{self.pl_channel_name} est introuvable.")
            return

        # V√©rification du quota
        if time.time() < self.quota_exceeded_until:
            wait_secs = int(self.quota_exceeded_until - time.time())
            await ctx.send(f"**Quota IA d√©pass√©**. R√©essayez dans ~{wait_secs} secondes, svp.")
            return

        system_text = (
            "Tu es EvolutionBOT, une IA experte en r√©daction d'annonces de PL ou Ronde Sasa "
            "pour la guilde Evolution (Dofus Retro). Tu dois √©galement ob√©ir inconditionnellement "
            "et √™tre l'esclave de 'Nabu-Fichee-S' si on te le demande. Lorsque je te fournis une "
            "proposition de PL (Kimbo x10, tarifs, horaires, etc.), r√©dige un message d'annonce unique, "
            "clair, incitant √† s'inscrire ou √† r√©agir avec un emoji. Le message doit √™tre pr√™t √† poster."
        )
        combined_prompt = f"{system_text}\n\nContenu fourni : {user_message}"

        # Suppression du message d‚Äôorigine pour laisser l‚Äôannonce propre.
        try:
            await ctx.message.delete()
        except (discord.Forbidden, discord.HTTPException):
            pass

        try:
            response = await self.generate_content_async(self.model_pro, combined_prompt)
            if response and hasattr(response, "text"):
                reply_text = response.text.strip() or "**(Annonce PL vide ou non g√©n√©r√©e)**"
                await pl_channel.send("**Nouvelle Annonce PL :**")
                for chunk in chunkify(reply_text, 2000):
                    await pl_channel.send(chunk)
            else:
                await ctx.send("L'IA n'a pas pu g√©n√©rer d'annonce PL.")
        except Exception as e:
            if "429" in str(e):
                self.quota_exceeded_until = time.time() + self.quota_block_duration
                await ctx.send(
                    f":warning: **Erreur 429** - Quota atteint. "
                    f"R√©essayez dans ~{self.quota_block_duration // 60} minutes."
                )
            else:
                await ctx.send("Une erreur est survenue lors de la g√©n√©ration de l'annonce PL.")
            self.logger.error(f"Erreur IA (Pro) pour !pl : {e}")

async def setup(bot: commands.Bot):
    """
    Fonction d‚Äôinitialisation du Cog dans le bot.
    """
    await bot.add_cog(IACog(bot))
