#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
import logging
import asyncio
import collections
import random
import re
import unicodedata

from rapidfuzz.distance import Levenshtein

import discord
from discord.ext import commands, tasks
import google.generativeai as genai
from dotenv import load_dotenv

##############################################
# Constantes "globales" et fonctions utilitaires
##############################################

# Exemple de nom de salon "console" si on voulait reproduire la logique de dump,
# non obligatoire ici (contrairement √† Code B qui stocke des donn√©es JSON).
CONSOLE_CHANNEL_NAME = "console"

# Intervalle de la boucle process_queue
QUEUE_PROCESS_INTERVAL = 5

def chunk_list(txt, size=2000):
    """
    Coupe une longue cha√Æne en morceaux de taille <= size.
    √âquivalent de 'chunkify' du code original,
    mais √©crit ici pour reproduire le style de Code B.
    """
    for i in range(0, len(txt), size):
        yield txt[i:i+size]

def normalize_profanity(text: str) -> str:
    """Normalise une cha√Æne pour la d√©tection d'insultes."""
    # Normalisation basique et retrait des accents
    nfkd = unicodedata.normalize("NFKD", text.casefold())
    no_diac = "".join(c for c in nfkd if unicodedata.category(c) != "Mn")

    # Substitutions leet speak courantes
    leet_table = str.maketrans({"0": "o", "1": "i", "3": "e", "4": "a", "5": "s", "7": "t"})
    leet = no_diac.translate(leet_table)

    # On supprime tout sauf les lettres et chiffres
    return re.sub(r"[^a-z0-9]", "", leet)

def is_exact_match(msg: str, keyword: str) -> bool:
    """Retourne ``True`` si ``keyword`` appara√Æt dans ``msg`` (distance ‚â§ 1)."""

    norm_msg = normalize_profanity(msg)
    norm_kw = normalize_profanity(keyword)
    if not norm_kw:
        return False

    klen = len(norm_kw)
    for l in range(max(1, klen - 1), klen + 2):
        for i in range(0, len(norm_msg) - l + 1):
            part = norm_msg[i : i + l]
            if Levenshtein.distance(part, norm_kw) <= 1:
                return True
    return False

##############################################
# Listes de mots-cl√©s / intentions
##############################################

HUMOR_KEYWORDS = [
    "haha","lol","mdr","ptdr","xD","xd","ü§£","üòÇ","üòÖ","üòÜ",
    "trop dr√¥le","c'est dr√¥le","excellent","jpp","marrant",
    "mort de rire","je rigole","√ßa me tue","hilarant","√©norme",
    "pli√©","trop fort","trop marrant","c'est fun","wtf",
    "explos√©","je suis mort","dead","gros fou rire","je suis pli√©",
    "mdrrr","ptdrrr","loool","mdrrrr","ptdrrrr",
    "p√©t√© de rire","√ßa m'a tu√©","rigolade","rigole fort","d√©lire",
    "je pleure","j'en peux plus","je suffoque","trop bon","mdrrrrrr",
    "trop vrai","rire aux √©clats","cette barre","fou rire","mdr üòÇ",
    "p√©t√©","c'est abus√©","mdrrrrrrr","ptdrrrrrrr","lolilol",
    "j'en peux vraiment plus","c'est magique","la crise","l'√©clate",
    "compl√®tement mort","je suis d√©c√©d√©","au bout de ma vie","tr√®s tr√®s dr√¥le",
    "j'ai explos√©","m√©croul√©","mdrrrrrrrrr","√©normissime","exceptionnel"
]

SARCASM_KEYWORDS = [
    "sarcasme","ironie","sarcastique","ironique","bien s√ªr",
    "√©videmment","comme par hasard","sans blague","tu m'√©tonnes",
    "c'est √ßa ouais","bravo champion","mais bien s√ªr","quel g√©nie",
    "je suis impressionn√©","quelle surprise","incroyable","tu crois ?",
    "√ßa se voit pas du tout","c‚Äôest √©vident","noooon sans rire",
    "√©tonnant","magnifique","brillant","du grand art","bah voyons",
    "g√©nial","c'est s√ªr","comme c'est √©tonnant","tu parles",
    "wow incroyable","ah oui vraiment ?","s√©rieux ?",
    "mais oui bien s√ªr","on y croit","franchement ?","tellement logique",
    "c'est clair","je n'aurais jamais devin√©","quelle originalit√©",
    "quel talent","jamais vu √ßa","grandiose","ma-gni-fi-que",
    "quelle intelligence","√ßa m'√©tonne m√™me pas","quel exploit",
    "√ßa alors","tu m'en diras tant","extraordinaire","formidable vraiment",
    "superbe logique","on applaudit","√ßa promet","ah bah tiens",
    "super original","bravo Einstein"
]

LIGHT_PROVOCATION_KEYWORDS = [
    "noob","1v1","t'es nul","m√™me pas cap","petit joueur","facile",
    "ez","easy","tu fais quoi l√†","d√©butant","faible","peureux",
    "l√¢che","viens te battre","c'est tout ?","tu crains","trop facile",
    "pas de niveau","tu dors ?","t'es o√π ?","va t'entra√Æner",
    "t'as peur","tu fais piti√©","ram√®ne-toi","petite nature",
    "niveau z√©ro","on t'attend","viens","faiblard","fragile",
    "boulet","t'es √©clat√©","niveau d√©butant","c'est faible",
    "tu vaux rien","tu stresses ?","viens tester","tu fuis ?",
    "√ßa joue petit bras","on t'entend plus","je t'attends",
    "t'es pas pr√™t","je m'ennuie l√†","pas terrible","t'as craqu√©",
    "je pensais mieux","mou du genou","viens voir","joue mieux",
    "arr√™te le massacre","c'est g√™nant","reviens quand tu seras pr√™t",
    "t'es perdu ?","tu t'en sors ?","path√©tique","petit bras","trop lent",
    "fatigu√© ?","t'es √† la ramasse"
]

SERIOUS_INSULT_KEYWORDS = [
    "connard","enfoir√©","fdp","fils de pute","pute","salope",
    "ta m√®re","b√¢tard","encul√©","sous-merde","ordure","abruti",
    "con","trou du cul","abruti fini","cr√©tin","d√©bile","demeur√©",
    "mongol","attard√©","gros porc","grosse merde","sale chien",
    "chien","clochard","d√©chet","pauvre type","minable","rat√©",
    "sombre merde","vieux con","grosse pute","sous-race","cafard",
    "pauvre merde","sac √† merde","pauvre con","sale merde",
    "fumier","parasite","toxico","gros naze","encul√© de ta race",
    "fils de chien","t√™te de cul","sale pute","putain","sous-homme",
    "abruti cong√©nital","grosse raclure","pourriture","grosse ordure",
    "mis√©rable","rat d'√©gout","sangsue","sale ordure","vermine",
    "d√©traqu√©","fou furieux","t√™te de noeud","tg","ta gueule"
]

DISCRIMINATION_KEYWORDS = [
    "raciste","racisme","n√®gre","negro","bougnoule","chinetoque",
    "brid√©","p√©d√©","tapette","tarlouze","goudou","pd",
    "sale arabe","sale juif","youpin","feuj","sale noir",
    "sale blanc","sale asiat","sale chinois","sale homo",
    "sale gay","handicap√©","mongolien","autiste",
    "sale musulman","terroriste","sale renoi","rebeu","sale rebeu",
    "babtou","sale babtou","niaque","trisomique","retard√©",
    "bouffeur de porc","sale p√©dale","sale gouine","bicot",
    "sale hindou","n√©gresse","beurrette","sale polak",
    "sale rom","gitano","manouche","sale catho","sale ath√©e",
    "sale m√©cr√©ant","sale pakpak","bougnoulisation",
    "boucaque","cafre","negresse","sale migrant","barbu",
    "sale chr√©tien","sale protestant","sale bouddhiste"
]

THREAT_KEYWORDS = [
    "je vais te tuer","je vais t'√©clater","je vais te frapper",
    "fais gaffe √† toi","menace","t'es mort","je vais te d√©foncer",
    "tu vas voir","fais attention √† toi","tu vas le regretter",
    "je vais te casser la gueule","je vais te faire mal",
    "attention √† toi","je sais o√π tu habites","√ßa va mal finir",
    "tu vas prendre cher","tu vas payer","tu vas souffrir",
    "gare √† toi","pr√©pare-toi √† souffrir","√ßa va chauffer",
    "je te retrouve","je vais te retrouver","tu vas comprendre",
    "tu vas morfler","je vais m'occuper de toi","tu vas pleurer",
    "je te d√©monte","tu vas d√©guster","je vais te r√©gler ton compte",
    "fini pour toi","tu vas crever","tu vas saigner","je vais te massacrer",
    "tu vas en baver","tu vas regretter","ta vie est finie",
    "je vais te terminer","tu ne t'en sortiras pas","je vais te briser",
    "tu vas ramasser","je te promets l'enfer","je vais te d√©truire",
    "tu vas p√©rir","tu vas t'en souvenir","c'est la fin pour toi",
    "tu vas tomber","tu ne verras pas demain","tu vas dispara√Ætre"
]

EMOJIS_FRIENDLY = ["üòÑ","üòâ","ü§ó","ü•≥","üôÇ"]
EMOJIS_FIRM = ["üò†","üôÖ","üö´","‚ö†Ô∏è","üò°"]

TONE_VARIATIONS = {
    "humor": [
        "R√©ponse humoristique, conviviale",
        "R√©ponds sur un ton joyeux et d√©tendu",
        "Fais une remarque l√©g√®re, agr√©ment√©e d'un soup√ßon de d√©rision amicale"
    ],
    "sarcasm": [
        "Ton ironique, garde une pointe de second degr√©",
        "Un brin d'ironie, sans vexer",
        "R√©ponds de fa√ßon un peu sarcastique mais restes subtil"
    ],
    "light_provocation": [
        "Provocation l√©g√®re, reste calme et joueur",
        "Ton d√©fi l√©ger, sans escalade",
        "R√©plique avec un esprit comp√©titif bon enfant"
    ],
    "serious_insult": [
        "Insulte grave, r√©ponds calmement et signale poliment le r√®glement",
        "Langage inappropri√©, demande de rester respectueux",
        "Montre ton d√©saccord sans agressivit√©, rappelle que ce n‚Äôest pas tol√©r√©"
    ],
    "discrimination": [
        "Propos discriminatoires, rappelle que c'est interdit ici",
        "R√©ponse ferme, mentionne les r√®gles contre la discrimination",
        "Signale que ces propos ne sont pas tol√©r√©s et renvoie au r√®glement"
    ],
    "threat": [
        "Menace d√©tect√©e, r√©ponds avec fermet√© et rappelle la charte",
        "Alerte menace, mentionne qu‚Äôon ne tol√®re aucune intimidation",
        "Menace claire, indique que cela viole les r√®gles de respect"
    ],
    "neutral": [
        "R√©ponse chaleureuse et neutre",
        "Ton classique, cordial et empathique",
        "R√©ponds poliment, sur un ton neutre et bienveillant"
    ]
}

USER_STYLES = ["affectueux","direct","enthousiaste"]

##############################################
# Classe Cog g√©rant la logique IA
##############################################

class IACog(commands.Cog):
    """
    Cog g√©rant l'Intelligence Artificielle (r√©ponses en langage naturel, etc.).
    Inspir√© du Code B : utilisation de cog_load pour l'initialisation,
    fonctions chunk_list globales, etc.
    """

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        # D√©finition ici des variables essentielles qui existeront
        # apr√®s l‚Äôinitialisation dans cog_load()
        # Nombre de messages du canal conserv√©s pour le contexte des r√©ponses IA
        self.history_limit = 100
        self.max_prompt_size = 5000
        self.quota_block_duration = 3600
        self.quota_exceeded_until = 0
        self.debug_mode = True

        self.annonce_channel_name = "annonces"
        self.event_channel_name = "organisation"
        self.pl_channel_name = "xplock-rondesasa-ronde"

        # √âl√©ments pour la gestion du r√®glement
        self.last_reglement_reminder = 0
        self.reglement_cooldown = 600

        # Contextes utilisateurs
        self.user_contexts = {}
        # Anti-spam
        self.spam_times = {}
        self.spam_interval = 5
        self.spam_threshold = 4

        # Queue de requ√™tes IA
        self.request_queue = collections.deque()
        self.pending_requests = False

        # Customisation utilisateur
        self.user_styles = {}

        # Warnings, mute, etc. (non utilis√© dans la d√©mo)
        self.warning_limit = 3
        self.mute_duration = 600

        # Les attributs ci-dessous seront configur√©s dans self.initialize_ia()
        self.logger = None
        self.api_key = None
        self.model_pro = None
        self.model_flash = None
        self.knowledge_text = ""

        # On lance la loop "process_queue" (mais elle d√©marrera
        # r√©ellement apr√®s le cog_load, selon Discord.py).
        self.process_queue.start()

    async def cog_load(self):
        """
        M√©thode appel√©e automatiquement par discord.py quand le Cog est charg√©.
        Similaire √† l‚Äôinitialize_data() de Code B : ici on configure l‚ÄôIA, etc.
        """
        await self.initialize_ia()

    async def initialize_ia(self):
        """
        Initialisation : configuration du logging, chargement de la cl√© .env,
        pr√©paration de l'IA, etc.
        """
        self.configure_logging()
        self.configure_gemini()
        self.knowledge_text = self.get_knowledge_text()
        self.logger.info("IACog initialis√© avec succ√®s.")

    def configure_logging(self):
        """
        Configure le logging (niveau DEBUG si self.debug_mode, sinon INFO).
        """
        lvl = logging.DEBUG if self.debug_mode else logging.INFO
        logging.basicConfig(level=lvl, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
        self.logger = logging.getLogger("IACog")

    def configure_gemini(self):
        """
        Charge la cl√© d'API et pr√©pare les mod√®les Generative AI.
        """
        load_dotenv()
        self.api_key = os.getenv("GEMINI_API_KEY")
        if not self.api_key:
            raise ValueError("Missing GEMINI_API_KEY dans .env.")
        genai.configure(api_key=self.api_key)
        self.model_pro = genai.GenerativeModel("gemini-1.5-pro")
        self.model_flash = genai.GenerativeModel("gemini-1.5-flash")

    def get_knowledge_text(self) -> str:
        """
        Renvoie un texte 'de connaissance' (r√®glement, etc.) qui sera utilis√©
        dans la construction de prompts IA.
        """
        return (
            "R√àGLEMENT OFFICIEL DE LA GUILDE EVOLUTION ‚Äì √âdition du 19/02/2025\n\n"
            "‚ÄúEnsemble, nous √©voluerons plus vite que seuls.‚Äù\n\n"
            "Bienvenue au sein de la guilde Evolution‚ÄØ! Nous sommes heureux de t‚Äôaccueillir "
            "dans notre communaut√©. Ce r√®glement est con√ßu pour assurer une ambiance conviviale, "
            "respectueuse et motivante, tout en permettant √† chacun de progresser selon son rythme "
            "et ses envies. [...] \n\n"
            "=====================================================================\n"
            "(Texte complet du r√®glement, inchang√© par souci de concision)\n"
            "=====================================================================\n"
            "LISTE DES COMMANDES DU BOT EVOLUTION\n"
            "=====================================================================\n"
            "‚Ä¢ !ia pour revoir ce guide\n"
            "‚Ä¢ !bot <message>\n"
            "‚Ä¢ !analyse\n"
            "‚Ä¢ !annonce <texte> (Staff)\n"
            "‚Ä¢ !event <texte> (Staff)\n"
            "‚Ä¢ !pl <texte>\n"
            "etc.\n"
        )

    @tasks.loop(seconds=QUEUE_PROCESS_INTERVAL)
    async def process_queue(self):
        """
        Boucle p√©riodique qui traite la file de requ√™tes IA (self.request_queue).
        """
        # On ne traite la file que si on n'est plus bloqu√© par un quota
        # et s'il y a des requ√™tes en attente.
        if self.pending_requests and time.time() >= self.quota_exceeded_until:
            while self.request_queue:
                ctx, prompt_callable = self.request_queue.popleft()
                try:
                    await prompt_callable(ctx)
                except Exception as e:
                    self.logger.warning(f"Erreur dans process_queue : {e}")
            self.pending_requests = False

    def cog_unload(self):
        """
        Si jamais on d√©charge le Cog, on arr√™te la boucle.
        """
        self.process_queue.cancel()

    ##############################################
    # Fonctions de d√©tection d'intention
    ##############################################

    def detect_intention(self, msg: str) -> str:
        """
        D√©tecte l'intention (humor, sarcasm, light_provocation, serious_insult,
        discrimination, threat, ou neutral) selon les mots-cl√©s.
        """
        for kw in SERIOUS_INSULT_KEYWORDS:
            if is_exact_match(msg, kw):
                return "serious_insult"

        for kw in DISCRIMINATION_KEYWORDS:
            if is_exact_match(msg, kw):
                return "discrimination"

        for kw in THREAT_KEYWORDS:
            if is_exact_match(msg, kw):
                return "threat"

        for kw in LIGHT_PROVOCATION_KEYWORDS:
            if is_exact_match(msg, kw):
                return "light_provocation"

        for kw in HUMOR_KEYWORDS:
            if is_exact_match(msg, kw):
                return "humor"

        for kw in SARCASM_KEYWORDS:
            if is_exact_match(msg, kw):
                return "sarcasm"

        return "neutral"

    ##############################################
    # Fonctions d'appel √† l'API IA
    ##############################################

    async def generate_content_async(self, model, prompt: str):
        """
        Appel synchrone du mod√®le, ex√©cut√© dans un thread (run_in_executor).
        """
        loop = asyncio.get_running_loop()

        def sync_call():
            return model.generate_content(prompt)

        return await loop.run_in_executor(None, sync_call)

    async def generate_content_with_fallback_async(self, prompt: str):
        """
        Tente d'abord le mod√®le PRO, puis bascule sur FLASH en cas d'erreur de quota (429).
        """
        try:
            r = await self.generate_content_async(self.model_pro, prompt)
            return r, "PRO"
        except Exception as e1:
            if any(x in str(e1).lower() for x in ["429","quota","unavailable"]):
                # Fallback sur le mod√®le FLASH
                try:
                    r2 = await self.generate_content_async(self.model_flash, prompt)
                    return r2, "FLASH"
                except Exception as e2:
                    if "429" in str(e2):
                        self.quota_exceeded_until = time.time() + self.quota_block_duration
                    raise e2
            else:
                raise e1

    ##############################################
    # Commandes utilisateur et logique IA
    ##############################################

    @commands.command(name="ia")
    async def ia_help_command(self, ctx):
        """
        Commande !ia : affiche le guide sur l'IA.
        """
        txt = (
            "**Commandes IA :**\n"
            "!annonce <texte> (Staff)\n"
            "!analyse\n"
            "!bot <message>\n"
            "!event <texte> (Staff)\n"
            "!pl <texte>\n"
            "Mentionnez @EvolutionBOT pour solliciter l'IA\n"
            "!ia pour revoir ce guide"
        )
        await ctx.send(txt)

    @commands.command(name="bot")
    async def free_command(self, ctx, *, user_message=None):
        """
        Commande !bot <message> : envoie la requ√™te √† l'IA.
        """
        if not user_message:
            await ctx.send("Usage : `!bot <votre question>`")
            return

        # Si on est en blocage de quota, on place la requ√™te en file.
        if time.time() < self.quota_exceeded_until:
            qlen = len(self.request_queue)
            await ctx.send(f"**IA satur√©e**. Requ√™te en file. ({qlen} en file)")
            self.request_queue.append((ctx, lambda co: self.handle_ai_request(co, user_message)))
            self.pending_requests = True
            return

        await self.handle_ai_request(ctx, user_message)

    async def handle_ai_request(self, ctx, user_message: str):
        """
        Logique commune pour traiter la requ√™te IA (anti-spam, intention, etc.).
        """
        now = time.time()
        uid = ctx.author.id

        # Historique utilisateur
        if uid not in self.user_contexts:
            self.user_contexts[uid] = collections.deque(maxlen=50)

        # Anti-spam
        if uid not in self.spam_times:
            self.spam_times[uid] = []
        self.spam_times[uid].append(now)
        self.spam_times[uid] = [t for t in self.spam_times[uid] if now - t < self.spam_interval]
        if len(self.spam_times[uid]) > self.spam_threshold:
            await ctx.send("Tu sembles spammer le bot. Merci de ralentir.")
            return

        # D√©tection d'intention
        intention = self.detect_intention(user_message)
        possible_tones = TONE_VARIATIONS.get(intention, TONE_VARIATIONS["neutral"])
        chosen_tone = random.choice(possible_tones)
        style_user = self.user_styles.get(uid, "neutre")

        if intention in ["humor","sarcasm","light_provocation","neutral"]:
            emo = random.choice(EMOJIS_FRIENDLY)
        else:
            emo = random.choice(EMOJIS_FIRM)

        mention_reglement = ""
        if intention in ["serious_insult","discrimination","threat"]:
            if (now - self.last_reglement_reminder) > self.reglement_cooldown:
                mention_reglement = " Merci de garder un langage convenable. (R√©f. R√®glement)"
                self.last_reglement_reminder = now

        # Contexte complet
        st = (
            f"Tu es EvolutionBOT, assistant de la guilde. "
            f"L'utilisateur a un style '{style_user}'. "
            f"{chosen_tone} {emo}{mention_reglement}"
        )

        user_history = list(self.user_contexts[uid])
        user_history.append(user_message)
        self.user_contexts[uid] = collections.deque(user_history, maxlen=50)

        # R√©cup√©ration d'historique du channel
        channel_history = []
        async for m in ctx.channel.history(limit=self.history_limit):
            if not m.author.bot:
                channel_history.append(m)
        channel_history.sort(key=lambda x: x.created_at)
        hist_txt = "".join(f"{m.author.display_name}: {m.content}\n" for m in channel_history)

        # Construction du prompt final
        final_prompt = (
            f"{st}\n\n"
            f"knowledge_text:\n{self.knowledge_text}\n\n"
            f"Contexte({self.history_limit}):\n{hist_txt}\n\n"
            f"Message de {ctx.author.display_name}: {user_message}"
        )

        # Tronquer si prompt trop long
        if len(final_prompt) > self.max_prompt_size:
            surplus = len(final_prompt) - self.max_prompt_size
            if surplus < len(hist_txt):
                hist_txt = hist_txt[surplus:]
            else:
                hist_txt = "(Contexte tronqu√©)"

            final_prompt = (
                f"{st}\n\n"
                f"knowledge_text:\n{self.knowledge_text}\n\n"
                f"{hist_txt}\n\n"
                f"Message de {ctx.author.display_name}: {user_message}"
            )

        # Appel IA
        try:
            resp, model_used = await self.generate_content_with_fallback_async(final_prompt)
            if resp and hasattr(resp, "text"):
                rep = resp.text.strip() or "(vide)"
                for c in chunk_list(rep):
                    await ctx.send(c)
            else:
                await ctx.send("Aucune r√©ponse de l'IA.")
        except Exception as e:
            if "429" in str(e):
                await ctx.send("**Quota IA d√©pass√©**, r√©essayez plus tard.")
            else:
                await ctx.send(f"Erreur IA: {e}")

    @commands.command(name="analyse")
    async def analyse_command(self, ctx):
        """
        Commande !analyse : demande un r√©sum√© des derniers messages du channel.
        Supprime le message d'origine pour discr√©tion.
        """
        lim = 100
        messages = []
        async for m in ctx.channel.history(limit=lim):
            if not m.author.bot:
                messages.append(m)
        messages.sort(key=lambda x: x.created_at)

        st = "Tu es EvolutionBOT, fais un rapport neutre sur les derniers messages (ambiance, conflits)."
        joined = "".join(f"{x.author.display_name}: {x.content}\n" for x in messages)
        pr = f"{st}\n{joined}"

        try:
            await ctx.message.delete()
        except:
            pass

        if time.time() < self.quota_exceeded_until:
            qlen = len(self.request_queue)
            await ctx.send(f"**IA satur√©e**. Requ√™te en file. ({qlen} en file)")
            self.request_queue.append((ctx, lambda co: self.analyse_fallback(co, pr)))
            self.pending_requests = True
            return

        await self.analyse_fallback(ctx, pr)

    async def analyse_fallback(self, ctx, prompt: str):
        """
        Version fallback (mise en file √©ventuelle) de l'analyse.
        """
        try:
            resp, model_used = await self.generate_content_with_fallback_async(prompt)
            if resp and hasattr(resp, "text"):
                rep = resp.text.strip() or "(vide)"
                for c in chunk_list(rep):
                    await ctx.send(c)
            else:
                await ctx.send("Aucune r√©ponse d'analyse.")
        except Exception as e:
            if "429" in str(e):
                await ctx.send("**Quota d√©pass√©**.")
            else:
                await ctx.send(f"Erreur: {e}")

    @commands.has_role("Staff")
    @commands.command(name="annonce")
    async def annonce_command(self, ctx, *, user_message=None):
        """
        Commande !annonce <texte> (Staff) : cr√©e une annonce dans #annonces.
        """
        if not user_message:
            await ctx.send("Usage: !annonce <texte>")
            return
        chan = discord.utils.get(ctx.guild.text_channels, name=self.annonce_channel_name)
        if not chan:
            await ctx.send("Canal 'annonces' introuvable.")
            return

        if time.time() < self.quota_exceeded_until:
            qlen = len(self.request_queue)
            await ctx.send(f"IA satur√©e, requ√™te en file. ({qlen} en file)")
            self.request_queue.append((ctx, lambda co: self.annonce_fallback(co, chan, user_message)))
            self.pending_requests = True
            return

        await self.annonce_fallback(ctx, chan, user_message)

    async def annonce_fallback(self, ctx, chan, user_message: str):
        """
        G√©n√®re un message d'annonce (tag @everyone) de fa√ßon IA.
        """
        st = "Tu es EvolutionBOT, cr√©e une annonce sympathique sans trop d'humour et commence par '@everyone'."
        pr = f"{st}\n{user_message}"
        try:
            await ctx.message.delete()
        except:
            pass

        try:
            resp, model_used = await self.generate_content_with_fallback_async(pr)
            if resp and hasattr(resp, "text"):
                final = resp.text.strip() or "(vide)"
                await chan.send(f"**Annonce [{model_used}] :**")
                for c in chunk_list(final):
                    await chan.send(c)
            else:
                await ctx.send("Pas d'annonce g√©n√©r√©e.")
        except Exception as e:
            if "429" in str(e):
                await ctx.send("Quota d√©pass√©.")
            else:
                await ctx.send(str(e))

    @commands.has_role("Staff")
    @commands.command(name="event")
    async def event_command(self, ctx, *, user_message=None):
        """
        Commande !event <texte> (Staff) : cr√©e un √©v√©nement dans #organisation.
        """
        if not user_message:
            await ctx.send("Usage: !event <texte>")
            return
        chan = discord.utils.get(ctx.guild.text_channels, name=self.event_channel_name)
        if not chan:
            await ctx.send("Canal d'organisation introuvable.")
            return

        if time.time() < self.quota_exceeded_until:
            qlen = len(self.request_queue)
            await ctx.send(f"IA satur√©e, requ√™te en file. ({qlen} en file)")
            self.request_queue.append((ctx, lambda co: self.event_fallback(co, chan, user_message)))
            self.pending_requests = True
            return

        await self.event_fallback(ctx, chan, user_message)

    async def event_fallback(self, ctx, chan, user_message: str):
        """
        G√©n√®re un message d'√©v√©nement (invitation).
        """
        st = "Tu es EvolutionBOT, r√©dige une invitation d'√©v√©nement incitant √† participer."
        pr = f"{st}\n\n{user_message}"
        try:
            await ctx.message.delete()
        except:
            pass

        try:
            resp, model_used = await self.generate_content_with_fallback_async(pr)
            if resp and hasattr(resp, "text"):
                rep = resp.text.strip() or "(vide)"
                await chan.send(f"**Nouvel √âv√©nement [{model_used}] :**")
                for c in chunk_list(rep):
                    await chan.send(c)
                role_val = discord.utils.get(ctx.guild.roles, name="Membre valid√© d'Evolution")
                if role_val:
                    await chan.send(role_val.mention)
            else:
                await ctx.send("√âv√©nement non g√©n√©r√©.")
        except Exception as e:
            if "429" in str(e):
                await ctx.send("Quota d√©pass√©.")
            else:
                await ctx.send(str(e))

    @commands.command(name="pl")
    async def pl_command(self, ctx, *, user_message=None):
        """
        Commande !pl <texte> : g√©n√®re une annonce de PL dans le canal xplock-rondesasa-ronde.
        """
        if not user_message:
            await ctx.send("Usage: !pl <texte>")
            return
        chan = discord.utils.get(ctx.guild.text_channels, name=self.pl_channel_name)
        if not chan:
            await ctx.send("Canal introuvable pour PL.")
            return

        if time.time() < self.quota_exceeded_until:
            qlen = len(self.request_queue)
            await ctx.send(f"IA satur√©e, requ√™te en file. ({qlen} en file)")
            self.request_queue.append((ctx, lambda co: self.pl_fallback(co, chan, user_message)))
            self.pending_requests = True
            return

        await self.pl_fallback(ctx, chan, user_message)

    async def pl_fallback(self, ctx, chan, user_message: str):
        """
        G√©n√®re un message d'annonce de PL.
        """
        st = "Tu es EvolutionBOT, r√©dige une annonce de PL claire et motivante."
        pr = f"{st}\n\n{user_message}"
        try:
            await ctx.message.delete()
        except:
            pass

        try:
            resp, model_used = await self.generate_content_with_fallback_async(pr)
            if resp and hasattr(resp, "text"):
                rep = resp.text.strip() or "(vide)"
                await chan.send(f"**Nouvelle Annonce PL [{model_used}] :**")
                for c in chunk_list(rep):
                    await chan.send(c)
            else:
                await ctx.send("Pas de r√©ponse IA pour PL.")
        except Exception as e:
            if "429" in str(e):
                await ctx.send("Quota d√©pass√©.")
            else:
                await ctx.send(str(e))

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """
        Listener qui intercepte les mentions directes du bot.
        """
        # Ignorer les messages du bot
        if message.author.bot:
            return

        # On r√©cup√®re le contexte, on v√©rifie si c'est une commande
        c = await self.bot.get_context(message)
        if c.valid and c.command:
            return

        # Si la mention du bot est dedans, on traite comme un appel IA
        if self.bot.user.mention in message.content:
            q = message.content.replace(self.bot.user.mention, "").strip()
            if q:
                if time.time() < self.quota_exceeded_until:
                    qlen = len(self.request_queue)
                    await c.send(f"**IA satur√©e**. Requ√™te en file. ({qlen} en file)")
                    self.request_queue.append((c, lambda co: self.handle_ai_request(co, q)))
                    self.pending_requests = True
                    return
                await self.handle_ai_request(c, q)


##############################################
# Configuration d'extension
##############################################

async def setup(bot: commands.Bot):
    """
    M√©thode appel√©e par bot.load_extension(...).
    Ajoute simplement le IACog au bot.
    """
    await bot.add_cog(IACog(bot))
