#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import discord
import asyncio
import json
import os
from discord.ext import commands
from datetime import datetime

# Constantes de configuration (noms des r√¥les / salons et d√©lais)
INVITES_ROLE_NAME = "Invit√©s"
VALIDATED_ROLE_NAME = "Membre valid√© d'Evolution"
GENERAL_CHANNEL_NAME = "ùêÜùêûÃÅùêßùêûÃÅùê´ùêöùê•"
RECRUITMENT_CHANNEL_NAME = "ùêëùêûùêúùê´ùêÆùê≠ùêûùê¶ùêûùêßùê≠"
WELCOME_CHANNEL_NAME = "ùêÅùê¢ùêûùêßùêØùêûùêßùêÆùêû"
TIMEOUT_RESPONSE = 300.0
DATA_FILE = os.path.join(os.path.dirname(__file__), "welcome_data.json")

class WelcomeCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.already_welcomed = set()
        self.load_welcomed_data()

    def load_welcomed_data(self):
        if os.path.isfile(DATA_FILE):
            try:
                with open(DATA_FILE, "r", encoding="utf-8") as f:
                    ids = json.load(f)
                self.already_welcomed = set(int(x) for x in ids)
            except Exception as e:
                print(f"[Welcome] Erreur chargement {DATA_FILE}: {e}")

    def save_welcomed_data(self):
        try:
            with open(DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(list(self.already_welcomed), f)
        except Exception as e:
            print(f"[Welcome] Erreur sauvegarde {DATA_FILE}: {e}")

    @commands.Cog.listener()
    async def on_member_join(self, member: discord.Member):
        print(f"[DEBUG] on_member_join triggered for user {member} (ID={member.id}).")
        if member.bot:
            print("[DEBUG] Member is a bot, ignoring.")
            return
        if member.id in self.already_welcomed:
            print("[DEBUG] Member d√©j√† accueilli, on arr√™te.")
            return
        self.already_welcomed.add(member.id)
        self.save_welcomed_data()
        print("[DEBUG] Ajout de l'ID dans already_welcomed.")
        try:
            dm_channel = await member.create_dm()
            description = (
                "Nous sommes super contents de t‚Äôaccueillir parmi nous. "
                "Avant de commencer, prends juste quelques instants pour parcourir notre **r√®glement** ‚Äî "
                "on pr√©f√®re que tout se passe dans la bonne ambiance‚ÄØ! üòá\n\n"
                "D‚Äôailleurs, l‚Äôas-tu **lu et accept√©**‚ÄØ?\n\n"
                "*(Pour confirmer, r√©ponds simplement par **oui**.)*\n\n"
                "*(Si tu ne r√©ponds pas, je t‚Äôenverrai un petit rappel.)*"
            )
            embed = discord.Embed(
                title=f"üéâ Bienvenue dans Evolution, {member.display_name}! üéâ",
                description=description,
                color=discord.Color.green(),
            )
            file = discord.File("welcome1.png", filename="welcome1.png")
            embed.set_image(url="attachment://welcome1.png")
            await dm_channel.send(embed=embed, file=file)
            print("[DEBUG] Message priv√© de bienvenue envoy√©.")
        except discord.Forbidden:
            print("[DEBUG] Impossible d‚Äôenvoyer un MP (DM bloqu√©s). Utilisation du fallback public.")
            await self.fallback_public_greeting(member)
            return

        def check_reglement(msg: discord.Message):
            return (
                msg.author == member
                and msg.channel == dm_channel
                and msg.content.lower().startswith("oui")
            )

        try:
            await self.bot.wait_for("message", timeout=TIMEOUT_RESPONSE, check=check_reglement)
            print("[DEBUG] L'utilisateur a accept√© le r√®glement.")
        except asyncio.TimeoutError:
            try:
                rappel_msg = (
                    f"‚è≥ H√©, {member.mention}, je n‚Äôai pas encore re√ßu ta confirmation !\n\n"
                    "Pour qu‚Äôon puisse avancer, r√©ponds simplement **oui** si tu **acceptes** le r√®glement. üìù"
                )
                await dm_channel.send(rappel_msg)
                print("[DEBUG] Rappel envoy√© (pas de r√©ponse).")
            except discord.Forbidden:
                pass
            return

        invite_or_member_msg = (
            "**Parfait !** Maintenant, dis-moi : tu es **membre** de la guilde ou juste **invit√©** sur le serveur ?\n\n"
            "*(R√©ponds par `membre` ou `invit√©`.)*"
        )
        await dm_channel.send(invite_or_member_msg)

        def check_status(msg: discord.Message):
            return (
                msg.author == member
                and msg.channel == dm_channel
                and msg.content.lower() in ["membre", "invit√©"]
            )

        try:
            status_response = await self.bot.wait_for("message", timeout=TIMEOUT_RESPONSE, check=check_status)
            user_status = status_response.content.lower()
            print(f"[DEBUG] L'utilisateur se d√©finit comme {user_status}.")
        except asyncio.TimeoutError:
            user_status = "invit√©"
            try:
                await dm_channel.send("Le temps est √©coul√©. Je vais supposer que tu es **invit√©** pour l‚Äôinstant, pas de soucis ! üíÅ")
                print("[DEBUG] L'utilisateur n'a pas r√©pondu, on le met par d√©faut en invit√©.")
            except discord.Forbidden:
                pass

        if user_status == "invit√©":
            guests_role = discord.utils.get(member.guild.roles, name=INVITES_ROLE_NAME)
            if guests_role:
                try:
                    await member.add_roles(guests_role)
                    await dm_channel.send(
                        "Pas de souci‚ÄØ! Je t‚Äôai attribu√© le r√¥le **Invit√©s**. "
                        "Profite du serveur et n‚Äôh√©site pas √† discuter avec nous. "
                        "Et si tu veux rejoindre la guilde plus tard, fais signe au staff‚ÄØ! üòâ"
                    )
                    print("[DEBUG] R√¥le Invit√©s ajout√©.")
                except Exception as e:
                    print(f"[DEBUG] Impossible d'ajouter le r√¥le Invit√©s √† {member}: {e}")
            else:
                await dm_channel.send("Le r√¥le 'Invit√©s' n‚Äôexiste pas encore. Peux-tu pr√©venir un admin ? üôè")
            return

        await dm_channel.send("**Super nouvelle !** J‚Äôai juste besoin d‚Äôune petite info : quel est **ton pseudo exact** sur Dofus ? ü§î")

        def check_pseudo(msg: discord.Message):
            return msg.author == member and msg.channel == dm_channel

        try:
            pseudo_response = await self.bot.wait_for("message", timeout=TIMEOUT_RESPONSE, check=check_pseudo)
            dofus_pseudo = pseudo_response.content.strip()
            print(f"[DEBUG] Pseudo Dofus : {dofus_pseudo}")
        except asyncio.TimeoutError:
            dofus_pseudo = "Inconnu"
            try:
                await dm_channel.send("Le temps est √©coul√©, on notera ‚ÄòInconnu‚Äô pour le moment. N‚Äôh√©site pas √† contacter le staff plus tard‚ÄØ! üòÖ")
            except discord.Forbidden:
                pass
            print("[DEBUG] Timeout pseudo => Inconnu.")
            return

        question_recruteur_msg = (
            "Derni√®re petite √©tape : **Qui t‚Äôa invit√©** √† nous rejoindre‚ÄØ? (Pseudo Discord ou Dofus)\n\n"
            "Si tu ne te souviens plus, r√©ponds simplement `non`."
        )
        await dm_channel.send(question_recruteur_msg)

        def check_recruteur(msg: discord.Message):
            return msg.author == member and msg.channel == dm_channel

        try:
            recruiter_response = await self.bot.wait_for("message", timeout=TIMEOUT_RESPONSE, check=check_recruteur)
            recruiter_pseudo = recruiter_response.content.strip()
            print(f"[DEBUG] Recruteur : {recruiter_pseudo}")
        except asyncio.TimeoutError:
            recruiter_pseudo = "non"
            try:
                await dm_channel.send("Ok, aucun probl√®me, je mettrai ‚Äònon‚Äô pour le recruteur. ü§∑")
            except discord.Forbidden:
                pass
            print("[DEBUG] Timeout recruteur => 'non'.")

        recruitment_date = datetime.now().strftime("%d/%m/%Y")
        validated_role = discord.utils.get(member.guild.roles, name=VALIDATED_ROLE_NAME)
        try:
            await member.edit(nick=dofus_pseudo)
            print("[DEBUG] Surnom modifi√©.")
        except (discord.Forbidden, discord.HTTPException) as e:
            print(f"[DEBUG] Impossible de renommer {member}: {e}")

        if validated_role:
            try:
                await member.add_roles(validated_role)
                print("[DEBUG] R√¥le Membre valid√© ajout√©.")
            except (discord.Forbidden, discord.HTTPException) as e:
                print(f"[DEBUG] Impossible d'ajouter le r√¥le Membre valid√© √† {member}: {e}")
        else:
            await dm_channel.send("Le r√¥le **Membre valid√© d'Evolution** est introuvable. Signale-le √† un admin. üöß")
            print("[DEBUG] R√¥le Membre valid√© introuvable.")

        try:
            await dm_channel.send(
                f"**G√©nial, {dofus_pseudo}‚ÄØ!** Te voil√† membre officiel de la guilde *Evolution*. "
                "Bienvenue √† toi et profite bien du serveur ! Si tu as la moindre question, "
                "n‚Äôh√©site pas √† la poser sur le salon g√©n√©ral ou √† contacter un membre du staff. üèÜ"
            )
            print("[DEBUG] Message final envoy√© √† l'utilisateur.")
        except discord.Forbidden:
            pass

        players_cog = self.bot.get_cog("PlayersCog")
        if players_cog:
            players_cog.auto_register_member(
                discord_id=member.id,
                discord_display_name=member.display_name,
                dofus_pseudo=dofus_pseudo
            )
            print("[DEBUG] Inscription auto dans PlayersCog effectu√©e.")
        else:
            print("[WARNING] PlayersCog introuvable, pas d'inscription auto.")

        general_channel = discord.utils.get(member.guild.text_channels, name=GENERAL_CHANNEL_NAME)
        if general_channel:
            annonce_msg_general = (
                f"üî• **Nouvelle recrue en approche** ! üî•\n\n"
                f"Faites un triomphe √† {member.mention}, alias **{dofus_pseudo}** sur Dofus, "
                "qui rejoint officiellement nos rangs ! üéâ\n"
                "Un grand bienvenue de la part de toute la guilde‚ÄØ! üòÉ"
            )
            await general_channel.send(annonce_msg_general)
            print("[DEBUG] Annonce envoy√©e dans #ùêÜùêûÃÅùêßùêûÃÅùê´ùêöùê•.")
        else:
            print("[DEBUG] Canal 'ùêÜùêûÃÅùêßùêûÃÅùê´ùêöùê•' introuvable.")

        recruitment_channel = discord.utils.get(member.guild.text_channels, name=RECRUITMENT_CHANNEL_NAME)
        if recruitment_channel:
            if recruiter_pseudo.lower() == "non":
                recruiter_info = "n‚Äôa pas indiqu√© de recruteur"
            else:
                recruiter_info = f"a √©t√© invit√© par **{recruiter_pseudo}**"
            await recruitment_channel.send(
                f"Le joueur **{dofus_pseudo}** a rejoint la guilde le **{recruitment_date}** "
                f"et {recruiter_info}."
            )
            print("[DEBUG] Annonce envoy√©e dans #ùêëùêûùêúùê´ùêÆùê≠ùêûùê¶ùêûùêßùê≠.")
        else:
            print("[DEBUG] Canal 'ùêëùêûùêúùê´ùêÆùê≠ùêûùê¶ùêûùêßùê≠' introuvable.")

    async def fallback_public_greeting(self, member: discord.Member):
        general_channel = discord.utils.get(member.guild.text_channels, name=GENERAL_CHANNEL_NAME)
        welcome_channel = discord.utils.get(member.guild.text_channels, name=WELCOME_CHANNEL_NAME)
        if general_channel:
            extra = f" Passe sur {welcome_channel.mention} pour plus d'informations." if welcome_channel else ""
            await general_channel.send(
                f"üëã {member.mention}, je n‚Äôai pas pu t‚Äôenvoyer de message priv√© ! "
                "Active tes MP pour finaliser l‚Äôaccueil. "
                "En attendant, sois le/la bienvenu¬∑e parmi nous‚ÄØ! üéâ" + extra
            )
        else:
            print("[DEBUG] Fallback impossible : canal #ùêÜùêûÃÅùêßùêûÃÅùê´ùêöùê• introuvable.")

async def setup(bot: commands.Bot):
    await bot.add_cog(WelcomeCog(bot))
