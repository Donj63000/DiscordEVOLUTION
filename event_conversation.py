# coding: utf-8
"""
Cog EvolutionBOT¬†: workflow interactif de cr√©ation d‚Äô√©v√©nements Discord.

Flux complet
------------
1. Un membre du r√¥le **Staff** lance `!event` dans un salon du serveur.
2. Le bot ouvre un DM¬†; l‚Äôutilisateur d√©crit librement l‚Äô√©v√©nement puis tape
   `termin√©`.
3. Le transcript est envoy√© √† l‚ÄôIA (cog ‚ÄúIACog‚Äù)¬†; celle‚Äëci renvoie un **JSON**
   (name, description, start_time, ‚Ä¶) que l‚Äôon parse en :class:`EventDraft`.
4. Un embed de **pr√©‚Äëvisualisation** est affich√© dans le DM avec des boutons
   ‚úÖ / ‚ùå (classe :class:`ConfirmView`).
5. Apr√®s validation¬†:
   * Cr√©ation d‚Äôun **Guild¬†Scheduled¬†Event** (type¬†external).
   * Annonce dans `#organisation` (ou autre) avec un embed ‚Äúsexy‚Äù.
   * Ajout de boutons RSVP. Les participants re√ßoivent le **r√¥le temporaire**
     ‚ÄúParticipants √©v√©nement‚Äù pour faciliter les pings.
   * Le r√¥le est automatiquement supprim√© une fois l‚Äô√©v√©nement termin√©.

Principales am√©liorations
-------------------------
* Gestion correcte du **channel_id** au lieu de guild_id pour les fetchs.
* Toutes les dates sont **timezone‚Äëaware UTC** afin d‚Äô√©viter les √©carts.
* V√©rification fine des **permissions** (Add¬†Reactions, Manage¬†Roles, ‚Ä¶).
* Nettoyage robuste des collectors / conversations m√™me apr√®s red√©marrage
  (persistance via :class:`EventStore`).
* Logging d√©taill√© ‚Üí plus simple √† d√©boguer sur Render.com.
"""

from __future__ import annotations

import asyncio
import json
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo
import dateparser
from typing import Dict, List, Optional

import discord
from discord.ext import commands, tasks

# -- helpers maison -----------------------------------------------------------
# parse_french_datetime("samedi 21h") -> datetime | None
from utils import parse_french_datetime, parse_duration
from utils.storage import EventStore
from models import EventData  # votre mod√®le pydantic / dataclass

# --------------------------------------------------------------------------- #

_log = logging.getLogger(__name__)

LOCAL_TZ = ZoneInfo("Europe/Paris")

#: d√©lai d‚Äôinactivit√© max dans la conversation DM (secondes)
DM_TIMEOUT = 15 * 60

SYSTEM_PROMPT = (
    "Tu es EvolutionBOT et tu aides √† cr√©er un √©v√©nement Discord. "
    "√Ä partir de la conversation suivante, fournis uniquement un JSON strict "
    'avec les cl√©s obligatoires : name, description, start_time, end_time, '
    "location, max_slots. Les dates sont au format JJ/MM/AAAA HH:MM. "
    "Mets null si une information est manquante. **Aucune explication**, "
    "seulement le JSON."
)

# --------------------------------------------------------------------------- #
# ------------------------------- DATA MODEL -------------------------------- #
# --------------------------------------------------------------------------- #


@dataclass(slots=True)
class EventDraft:
    """Repr√©sentation minimaliste de l‚Äô√©v√©nement avant cr√©ation Discord."""

    name: str
    description: str
    start_time: datetime
    end_time: datetime
    location: Optional[str] = None
    max_slots: Optional[int] = None

    @staticmethod
    def _parse_dt(raw: str | datetime | None) -> datetime | None:
        """Transforme *raw* en datetime timezone-aware (UTC)."""
        if raw is None:
            return None

        if isinstance(raw, datetime):
            dt = raw
        else:
            try:
                dt = datetime.strptime(raw, "%d/%m/%Y %H:%M")
            except ValueError:
                dt = dateparser.parse(
                    raw,
                    languages=["fr"],
                    settings={
                        "TIMEZONE": str(LOCAL_TZ),
                        "RETURN_AS_TIMEZONE_AWARE": True,
                        "PREFER_DATES_FROM": "future",
                    },
                )
                _log.debug("Parsing date ¬´%s¬ª ‚Üí %s", raw, dt)

        if dt is None:
            return None

        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=LOCAL_TZ)

        return dt.astimezone(timezone.utc)

    @classmethod
    def from_json(cls, obj: dict) -> "EventDraft":
        start = cls._parse_dt(obj.get("start_time"))
        end = cls._parse_dt(obj.get("end_time"))
        if start is None:
            raise ValueError("La date de d√©but est introuvable ou mal comprise.")
        if end is None:
            end = start + timedelta(hours=1)
        if end <= start:
            raise ValueError("L‚Äôheure de fin doit √™tre apr√®s l‚Äôheure de d√©but.")
        return cls(
            name=str(obj.get("name") or "√âv√©nement"),
            description=str(obj.get("description") or "Aucune description"),
            start_time=start,
            end_time=end,
            location=obj.get("location"),
            max_slots=int(obj["max_slots"]) if obj.get("max_slots") is not None else None,
        )

    # -------- embed helpers ------------------------------------------------ #

    def to_preview_embed(self) -> discord.Embed:
        """Embed envoy√© en DM pour validation."""
        embed = discord.Embed(title=f"üìÖ {self.name}", description=self.description, colour=0x3498db)
        embed.add_field(name="D√©but", value=self._fmt_dt(self.start_time), inline=False)
        embed.add_field(name="Fin", value=self._fmt_dt(self.end_time), inline=False)
        if self.location:
            embed.add_field(name="Lieu", value=self.location, inline=False)
        if self.max_slots is not None:
            embed.add_field(name="Places", value=str(self.max_slots), inline=False)
        return embed

    def to_announce_embed(self) -> discord.Embed:
        """Embed publi√© dans le canal organisation."""
        embed = discord.Embed(
            title=f"üì£ {self.name}",
            description=self.description,
            colour=0x1abc9c,
        )
        embed.add_field(
            name="Quand",
            value=f"{self._fmt_dt(self.start_time)} ‚Ä¢ <t:{int(self.start_time.timestamp())}:R>",
            inline=False,
        )
        embed.add_field(name="Fin", value=self._fmt_dt(self.end_time), inline=False)
        if self.location:
            embed.add_field(name="Lieu", value=self.location, inline=False)
        if self.max_slots is not None:
            embed.add_field(name="Places", value=str(self.max_slots), inline=False)
        embed.set_footer(text="Clique sur un des boutons pour t‚Äôinscrire ‚§µÔ∏è")
        return embed

    @staticmethod
    def _fmt_dt(dt: datetime) -> str:  # format FR lisible
        return dt.astimezone(timezone.utc).strftime("%d/%m/%Y %H:%M UTC")


# --------------------------------------------------------------------------- #
# ------------------------------ UI COMPONENTS ------------------------------ #
# --------------------------------------------------------------------------- #


class ConfirmView(discord.ui.View):
    """Deux boutons ‚úÖ / ‚ùå pour valider la pr√©‚Äëvisualisation."""

    def __init__(self) -> None:
        super().__init__(timeout=DM_TIMEOUT)
        self.value: Optional[bool] = None

    @discord.ui.button(emoji="‚úÖ", style=discord.ButtonStyle.success, label="Valider")
    async def _confirm(self, interaction: discord.Interaction, _: discord.ui.Button):
        self.value = True
        await interaction.response.defer()
        self.stop()

    @discord.ui.button(emoji="‚ùå", style=discord.ButtonStyle.danger, label="Annuler")
    async def _cancel(self, interaction: discord.Interaction, _: discord.ui.Button):
        self.value = False
        await interaction.response.defer()
        self.stop()


class RSVPView(discord.ui.View):
    """Boutons d‚Äôinscription attach√©s au message d‚Äôannonce."""

    def __init__(self, role: Optional[discord.Role], max_slots: Optional[int]):
        super().__init__(timeout=None)
        self.role = role
        self.max_slots = max_slots
        self._going: set[int] = set()

    # ---------- callbacks ---------- #

    @discord.ui.button(label="Je participe ‚úÖ", style=discord.ButtonStyle.success, custom_id="rsvp_yes")
    async def rsvp_yes(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.max_slots and len(self._going) >= self.max_slots and interaction.user.id not in self._going:
            return await interaction.response.send_message(
                "D√©sol√©, il n‚Äôy a plus de place‚ÄØ!", ephemeral=True
            )
        if self.role:
            try:
                await interaction.user.add_roles(self.role, reason="Inscription √©v√©nement")
            except discord.Forbidden:
                pass
        self._going.add(interaction.user.id)
        await interaction.response.send_message("‚úÖ¬†Inscription enregistr√©e¬†!", ephemeral=True)

    @discord.ui.button(label="Me d√©sinscrire ‚ùå", style=discord.ButtonStyle.danger, custom_id="rsvp_no")
    async def rsvp_no(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.role:
            try:
                await interaction.user.remove_roles(self.role, reason="D√©sinscription √©v√©nement")
            except discord.Forbidden:
                pass
        self._going.discard(interaction.user.id)
        await interaction.response.send_message("D√©sinscription effectu√©e.", ephemeral=True)


# --------------------------------------------------------------------------- #
# ------------------------------ MAIN   COG --------------------------------- #
# --------------------------------------------------------------------------- #


class EventConversationCog(commands.Cog):
    """Workflow DM + Scheduled¬†Event + annonce."""

    def __init__(
        self,
        bot: commands.Bot,
        *,
        announce_channel_name: str = "organisation",
        participant_role_name: str = "Participants √©v√©nement",
    ):
        self.bot = bot
        self.announce_channel_name = announce_channel_name
        self.participant_role_name = participant_role_name
        self.store = EventStore(bot)  # ‚Ü≥ persistance JSON/DB
        # mapping conversation en cours¬†: user_id -> transcript list[str]
        self._conversations: Dict[int, List[str]] = {}
        self._logger = _log.getChild("EventConversation")

    # ---------------- Lifecycle ---------------- #

    async def cog_load(self) -> None:
        await self.store.connect()
        # on d√©marre le background task de cleanup r√¥les orphelins
        self.cleanup_stale_roles.start()

    async def cog_unload(self) -> None:
        self.cleanup_stale_roles.cancel()

    # ---------------- Helpers persistance ---------------- #

    async def _save_conv(self, user_id: int, transcript: Optional[List[str]]):
        await self.store.save_conversation(str(user_id), transcript)

    async def _save_event(self, event_id: int, payload: EventData):
        await self.store.save_event(str(event_id), payload)

    # ---------------- Command staff ---------------- #

    @commands.command(name="event")
    @commands.has_role("Staff")
    async def cmd_event(self, ctx: commands.Context) -> None:
        """D√©marre la conversation DM pour cr√©er un √©v√©nement."""
        if ctx.guild is None:
            return await ctx.reply("Cette commande doit √™tre utilis√©e dans un serveur.")

        # efface le message staff pour garder le canal propre
        try:
            await ctx.message.delete(delay=0)
        except discord.HTTPException:
            pass

        dm = await ctx.author.create_dm()
        await dm.send(
            "D√©cris-moi ton √©v√©nement en **plusieurs messages**.\n"
            "Quand tu as fini, tape `termin√©`.\n\n"
            "*(15‚ÄØmin d‚Äôinactivit√© ‚áí annulation)*"
        )

        transcript: List[str] = []
        self._conversations[ctx.author.id] = transcript
        await self._save_conv(ctx.author.id, transcript)

        def check(m: discord.Message) -> bool:
            return m.author == ctx.author and isinstance(m.channel, discord.DMChannel)

        # ------------- collecte DM ------------- #
        while True:
            try:
                msg = await self.bot.wait_for("message", timeout=DM_TIMEOUT, check=check)
            except asyncio.TimeoutError:
                await dm.send("‚è±Ô∏è Temps √©coul√©, conversation annul√©e.")
                await self._save_conv(ctx.author.id, None)
                self._conversations.pop(ctx.author.id, None)
                return

            if msg.content.lower().startswith("termin√©"):
                break
            transcript.append(msg.content.strip())
            await self._save_conv(ctx.author.id, transcript)

        # ------------- appel IA ------------- #
        ia_cog = self.bot.get_cog("IACog")
        if ia_cog is None:
            await dm.send("‚ùå Le module IA n‚Äôest pas disponible.")
            return

        prompt = f"{SYSTEM_PROMPT}\n\nTRANSCRIPT:\n" + "\n".join(transcript)
        try:
            resp, _ = await ia_cog.generate_content_with_fallback_async(prompt)
            raw_json = self._extract_json(resp.text if hasattr(resp, "text") else str(resp))
            ai_payload = json.loads(raw_json)
            try:
                draft = EventDraft.from_json(ai_payload)
            except ValueError as exc:
                await dm.send(f"‚õî {exc}")
                return
        except Exception as exc:
            self._logger.exception("√âchec parsing IA : %s", exc)
            await dm.send(f"Impossible d‚Äôanalyser la r√©ponse de l‚ÄôIA.\n```\n{exc}\n```")
            return

        # date IA trop proche¬†? on tente un fallback full transcript
        if draft.start_time <= discord.utils.utcnow() + timedelta(minutes=5):
            alt = parse_french_datetime(" ".join(transcript))
            if alt:
                draft.start_time = alt
                draft.end_time = alt + (draft.end_time - draft.start_time)

        # si end_time toujours avant start_time ‚áí +1‚ÄØh
        if draft.end_time <= draft.start_time:
            draft.end_time = draft.start_time + timedelta(hours=1)

        # ------------- preview + validation ------------- #
        view_confirm = ConfirmView()
        preview_msg = await dm.send(embed=draft.to_preview_embed(), view=view_confirm)
        await view_confirm.wait()
        await preview_msg.edit(view=None)

        if view_confirm.value is not True:
            await dm.send("√âv√©nement annul√©. üëç")
            await self._save_conv(ctx.author.id, None)
            self._conversations.pop(ctx.author.id, None)
            return

        # ------------- contr√¥les finaux ------------- #
        now_utc = discord.utils.utcnow()
        if draft.start_time <= now_utc + timedelta(minutes=5):
            return await dm.send("‚ö†Ô∏è La date doit √™tre au moins 5‚ÄØminutes dans le futur.")
        if draft.end_time <= draft.start_time:
            return await dm.send("‚ö†Ô∏è L‚Äôheure de fin doit √™tre apr√®s l‚Äôheure de d√©but.")

        # ------------- cr√©ation c√¥t√© serveur ------------- #
        guild: discord.Guild = ctx.guild  # type: ignore
        role = await self._get_or_create_participant_role(guild)

        try:
            scheduled_event = await guild.create_scheduled_event(
                name=draft.name,
                description=draft.description[:1000],
                start_time=draft.start_time,
                end_time=draft.end_time,
                entity_type=discord.EntityType.external,
                location=draft.location or "Discord",
                privacy_level=discord.PrivacyLevel.guild_only,
            )
        except discord.HTTPException as exc:
            self._logger.error("HTTPException create_scheduled_event: %s", exc.text)
            await dm.send(f"‚ùå Discord refuse la cr√©ation : {exc.text}")
            return

        announce_channel = discord.utils.get(guild.text_channels, name=self.announce_channel_name)
        if announce_channel is None:
            return await dm.send(f"‚ùå Canal #{self.announce_channel_name} introuvable¬†!")

        view_rsvp = RSVPView(role, draft.max_slots)
        try:
            announce_msg = await announce_channel.send(embed=draft.to_announce_embed(), view=view_rsvp)
        except discord.Forbidden:
            return await dm.send("Je n‚Äôai pas la permission d‚Äôenvoyer des messages ou des embeds dans le canal cible.")

        await dm.send("‚úÖ √âv√©nement cr√©√© et annonc√©¬†! Merci.")

        # persistance
        stored = EventData(
            guild_id=guild.id,
            channel_id=announce_channel.id,
            title=draft.name,
            description=draft.description,
            starts_at=draft.start_time,
            ends_at=draft.end_time,
            max_participants=draft.max_slots,
            timezone="UTC",
            recurrence=None,
            temp_role_id=role.id if role else None,
            banner_url=None,
            author_id=ctx.author.id,
            announce_message_id=announce_msg.id,  # champ optionnel
            discord_event_id=scheduled_event.id,
        )
        await self._save_event(scheduled_event.id, stored)
        await self._save_conv(ctx.author.id, None)
        self._conversations.pop(ctx.author.id, None)

        # planifie la suppression du r√¥le
        if role:
            self.bot.loop.create_task(self._schedule_role_cleanup(role, draft.end_time))

    # --------------------------------------------------------------------- #
    # -------------------------   INTERNALS   ----------------------------- #
    # --------------------------------------------------------------------- #

    @staticmethod
    def _extract_json(text: str) -> str:
        """Extrait la premi√®re structure JSON trouv√©e dans *text*."""
        start, end = text.find("{"), text.rfind("}")
        if start == -1 or end == -1 or end < start:
            raise ValueError("JSON introuvable dans la r√©ponse IA.")
        return text[start : end + 1]

    async def _get_or_create_participant_role(self, guild: discord.Guild) -> Optional[discord.Role]:
        role = discord.utils.get(guild.roles, name=self.participant_role_name)
        if role:
            return role
        try:
            return await guild.create_role(name=self.participant_role_name, reason="R√¥le participants √©v√©nements")
        except discord.Forbidden:
            self._logger.warning("Impossible de cr√©er le r√¥le participants (permissions).")
            return None

    async def _schedule_role_cleanup(self, role: discord.Role, end_time: datetime):
        delay = max(0, (end_time - discord.utils.utcnow()).total_seconds())
        await asyncio.sleep(delay)
        try:
            await role.delete(reason="Fin de l‚Äô√©v√©nement ‚Äì nettoyage r√¥le temporaire")
        except discord.HTTPException:
            pass  # r√¥le d√©j√† supprim√© ou permissions manquantes

    # --------------------------------------------------------------------- #
    # ------------------------  BACKGROUND TASKS  ------------------------- #
    # --------------------------------------------------------------------- #

    @tasks.loop(hours=6)
    async def cleanup_stale_roles(self):
        """Supprime les r√¥les ¬´‚ÄØParticipants √©v√©nement‚ÄØ¬ª plus vieux que 7¬†jours."""
        for guild in self.bot.guilds:
            for role in list(guild.roles):
                if (
                    role.name == self.participant_role_name
                    and (discord.utils.utcnow() - role.created_at).days >= 7
                ):
                    try:
                        await role.delete(reason="Nettoyage automatique r√¥les obsol√®tes")
                    except discord.HTTPException:
                        continue


async def setup(bot: commands.Bot):
    await bot.add_cog(EventConversationCog(bot))
